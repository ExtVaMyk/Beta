OBJECT Table 84000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=16:48:59;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10         }
    { 10  ;   ;VAT Amount Specification;Option    ;OptionString=Multiple Lines,Always,Never }
    { 80  ;   ;Legal Conditions    ;Text250        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000000();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 84999 ForNAV Document Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=22-03-17;
    Time=08:35:21;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              NLD=Btw %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 2   ;   ;VAT Base            ;Decimal       ;CaptionML=[ENU=VAT Base;
                                                              NLD=Basisbedrag btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 3   ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              NLD=Btw-bedrag];
                                                   AutoFormatType=1 }
    { 4   ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              NLD=Bedrag incl. btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              NLD=Btw-identificatie];
                                                   Editable=No }
    { 6   ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              NLD=Regelbedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Inv. Disc. Base Amount;Decimal     ;CaptionML=[ENU=Inv. Disc. Base Amount;
                                                              NLD=Basisbedrag factuurkorting];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 8   ;   ;Invoice Discount Amount;Decimal    ;CaptionML=[ENU=Invoice Discount Amount;
                                                              NLD=Bedrag factuurkorting];
                                                   AutoFormatType=1 }
    { 9   ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              NLD=Btw-berekening];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    NLD=Normaal,Verlegging,Volledig,Sales tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 10  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              NLD=Tax Group Code];
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NLD=Aantal];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;CaptionML=[ENU=Modified;
                                                              NLD=Gewijzigd] }
    { 13  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              NLD=Use Tax] }
    { 14  ;   ;Calculated VAT Amount;Decimal      ;CaptionML=[ENU=Calculated VAT Amount;
                                                              NLD=Berekend btw-bedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              NLD=Btw-verschil];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              NLD=Positief] }
    { 17  ;   ;Includes Prepayment ;Boolean       ;CaptionML=[ENU=Includes Prepayment;
                                                              NLD=Inclusief vooruitbetaling] }
    { 18  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              NLD=Code btw-clausule] }
    { 19  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              NLD=Belastingcategorie] }
    { 84000;  ;Line No.            ;Integer        }
    { 84001;  ;Amount              ;Decimal        }
    { 84002;  ;Allow Invoice Disc. ;Boolean        }
    { 84003;  ;Inv. Discount Amount;Decimal        }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForRecRef@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      Fld@1000000002 : Record 2000000041;
    BEGIN
      FindAndSetField(RecRef, 'Line No.', 84000);

      Fld.SETRANGE(TableNo, DATABASE::"ForNAV Document Line Buffer");
      Fld.SETFILTER("No.", '<>84000');
      Fld.FINDSET;
      REPEAT
        FindAndSetField(RecRef, Fld.FieldName, Fld."No.");
      UNTIL Fld.NEXT = 0;
      FindAndSetField(RecRef, FIELDNAME("VAT %"), "VAT %");
    END;

    LOCAL PROCEDURE FindAndSetField@1000000004(VAR RecRef@1000000003 : RecordRef;FieldName@1000000002 : Text;FieldNo@1000000004 : Integer);
    VAR
      FldRef@1000000001 : FieldRef;
      Fld@1000000000 : Record 2000000041;
      ThisRecRef@1000000006 : RecordRef;
      ThisFld@1000000005 : FieldRef;
    BEGIN
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, FieldName);
      IF NOT Fld.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Fld."No.");

      //ThisRecRef.OPEN(DATABASE::"ForNAV Document Line Buffer", TRUE);
      ThisRecRef.GETTABLE(Rec);
      ThisFld := ThisRecRef.FIELD(FieldNo);
      ThisFld.VALUE := FldRef.VALUE;
      // IF FieldNo = 84000 THEN
      //  ThisRecRef.INSERT
      // ELSE
      //  ThisRecRef.MODIFY;
      ThisRecRef.SETTABLE(Rec);
      IF FieldNo = 84000 THEN
        INSERT
      ELSE
        MODIFY;
    END;

    BEGIN
    END.
  }
}

OBJECT Report 84000 ForNAV Sal. Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=18:01:04;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>15b012bd-1592-48ac-9a2a-9c07ab0364ba</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>fdda7588-d241-407c-8c6b-5fed753f1f0f</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="HasDiscount">
          <DataField>HasDiscount</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84001 ForNAV Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:29:46;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>15b012bd-1592-48ac-9a2a-9c07ab0364ba</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>fdda7588-d241-407c-8c6b-5fed753f1f0f</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="HasDiscount">
          <DataField>HasDiscount</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84002 ForNAV Sales Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:31:09;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>15b012bd-1592-48ac-9a2a-9c07ab0364ba</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>fdda7588-d241-407c-8c6b-5fed753f1f0f</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="HasDiscount">
          <DataField>HasDiscount</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84100 ForNAV Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=18:00:44;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>aff33251-2c6d-47ad-aebd-83b72a9da6c9</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>f2f6d912-3b15-42bf-be9f-6e43296dd4f7</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="HasDiscount">
          <DataField>HasDiscount</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84101 ForNAV Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:57:05;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>aff33251-2c6d-47ad-aebd-83b72a9da6c9</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>f2f6d912-3b15-42bf-be9f-6e43296dd4f7</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="HasDiscount">
          <DataField>HasDiscount</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84201 ForNAV Reminder
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=18:20:19;
    Modified=Yes;
    Version List=FORNAV2.0.0.1180/1180;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table297;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
                                 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1180, Version=2.0.0.1180, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>e5065331-4d85-4f8b-91f7-3fc3463b3a4e</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>187b5766-e344-405a-bffe-0782dd07794b</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Codeunit 84000 ForNAV Check Document Discount
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:54:50;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE HasDiscount@1000000001(Rec@1000000000 : Variant) : Boolean;
    VAR
      RecRefLib@1000000002 : Codeunit 84090;
      TestValidDociFace@1000000003 : Codeunit 84080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      EXIT(CheckLinesTableForDiscount(RecRef, FindDiscountFieldNoInLines(RecRef)));
    END;

    LOCAL PROCEDURE FindDiscountFieldNoInLines@1000000009(RecRef@1000000001 : RecordRef) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      NoDiscountFieldErr@1000000002 : TextConst 'ENU=The connected line table does not contain a valid field for Line Discount.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE(FieldName, 'Line Discount %');
      IF NOT Field.FINDFIRST THEN
        ERROR(NoDiscountFieldErr);

      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE CheckLinesTableForDiscount@1000000011(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      RecRefLib@1000000004 : Codeunit 84090;
      LineRec@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');

      FldRef := LineRec.FIELD(FieldNo);
      FldRef.SETFILTER('<>0');
      EXIT(NOT LineRec.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84001 ForNAV Get Vat Amount Lines
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:43:06;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatAmountLines@1000000000(Rec@1000000000 : Variant;VAR VATAmountLine@1000000001 : TEMPORARY Record 290);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 84999;
      RecRefLib@1000000002 : Codeunit 84090;
      TestValidDociFace@1000000004 : Codeunit 84080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATAmountLine);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATAmountLine);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATAmountLine@1000000000 : Record 290);
    VAR
      NotTempErr@1000000001 : TextConst 'ENU=When using this function the Vat Amount Line table should be declared as temporary.';
    BEGIN
      WITH VATAmountLine DO
        IF NOT ISTEMPORARY THEN
          ERROR(NotTempErr);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 84999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 84090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 84999;VAR VATAmountLine@1000000000 : Record 290);
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATAmountLine.INIT;
          VATAmountLine."VAT Identifier" := "VAT Identifier";
          VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
          VATAmountLine."Tax Group Code" := "Tax Group Code";
          VATAmountLine."VAT %" := "VAT %";
          VATAmountLine."VAT Base" := Amount;
          VATAmountLine."Amount Including VAT" := "Amount Including VAT";
          VATAmountLine."Line Amount" := "Line Amount";
          IF "Allow Invoice Disc." THEN
            VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
          VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
          VATAmountLine."VAT Clause Code" := "VAT Clause Code";
          IF ("VAT %" <> 0) OR ("VAT Clause Code" <> '') OR (Amount <> "Amount Including VAT") THEN
            VATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84002 ForNAV Get Vat Clause
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:55:11;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TryGetVATClause@1000000000 : Integer;

    PROCEDURE GetVATClauses@1000000000(VAR VATAmountLine@1000000001 : TEMPORARY Record 290;VAR VATClause@1000000000 : Record 560;LanguageCode@1000000002 : Code[10]);
    BEGIN
      WITH VATAmountLine DO
        IF FINDSET THEN REPEAT
          TryGetVATClauseText(VATClause, "VAT Clause Code", LanguageCode);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE TryGetVATClauseText@1000000002(VAR VATClausePar@1000000000 : Record 560;VATClauseCode@1000000002 : Code[10];LanguageCode@1000000003 : Code[10]);
    VAR
      VATClause@1000000001 : Record 560;
    BEGIN
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;

      VATClause.TranslateDescription(LanguageCode);

      VATClausePar := VATClause;
      IF VATClausePar.INSERT THEN;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84020 ForNAV Replace Report Sel.
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=18:13:26;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ReplaceSalesOrderConfirmation;
            ReplaceSalesInvoice;
            ReplaceSalesCreditMemo;
            ReplacePurchaseOrderConfirmation;
            ReplacePurchaseInvoice;
            ReplaceReminder;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ReplaceSalesOrderConfirmation@1000000001();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Sal. Order Confirmation');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesInvoice@1000000000();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesCreditMemo@1000000002();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Credit Memo');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseOrderConfirmation@1000000005();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Order');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseInvoice@1000000003();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminder@1000000006();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::Reminder);
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::Reminder;
        Sequence := '1';
        "Report ID" := FindReportID('Reminder');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindReportID@1000000004(ReportName@1000000001 : Text) : Integer;
    VAR
      Obj@1000000000 : Record 2000000001;
    BEGIN
      WITH Obj DO BEGIN
        SETRANGE(Type, Obj.Type::Report);
        SETRANGE(Name, 'ForNAV ' + ReportName);
        FINDFIRST;
        EXIT(ID);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84080 ForNAV Test Valid Doc iFace
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:31:55;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ThrowErrorIfNotValid@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      IsValid@1000000001 : Boolean;
      NotValidTableErr@1000000002 : TextConst 'ENU="This table (ID = %1) is not supported for this function."';
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          EXIT;
        DATABASE::"Sales Shipment Header":
          EXIT;
        DATABASE::"Sales Invoice Header":
          EXIT;
        DATABASE::"Sales Cr.Memo Header":
          EXIT;
      END;

      CheckForValidPartnerTables(RecRef, IsValid);
      IF IsValid THEN
        ERROR(NotValidTableErr);
    END;

    [Business]
    LOCAL PROCEDURE CheckForValidPartnerTables@1000000007(RecRef@1000000001 : RecordRef;VAR IsVaild@1000000000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84090 ForNAV RecordRef Library
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:54:07;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ConvertToRecRef@1000000002(VAR Rec@1000000000 : Variant;RecRef@1000000001 : RecordRef);
    VAR
      WrongDataTypeErr@1000000002 : TextConst 'ENU=Runtime Error: Wrong Datatype. Please contact your ForNAV reseller.';
    BEGIN
      CASE TRUE OF
        Rec.ISRECORDREF:
          RecRef := Rec;
        Rec.ISRECORD:
          RecRef.GETTABLE(Rec);
        ELSE
          ERROR(WrongDataTypeErr);
      END;
    END;

    PROCEDURE FindAndFilterieldNo@1000000003(VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000004 : RecordRef;VAR FldRef@1000000001 : FieldRef;Value@1000000005 : Text);
    VAR
      Field@1000000003 : Record 2000000041;
      DocumentNoField@1000000002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, Value);
      IF NOT Field.FINDFIRST THEN
        EXIT;

      DocumentNoField := RecRef.FIELD(Field."No.");

      Field.RESET;
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE("No.", Field."No.");
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := LineRec.FIELD(Field."No.");
      FldRef.SETRANGE(DocumentNoField.VALUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84997 ForNAV Create Test Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:14:57;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateVATClause;
            ChangeVATPostingSetup;
            ChangeExistingSalesInvoiceLines;
            ChangeReportSelections;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreateVATClause@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeVATPostingSetup@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeExistingSalesInvoiceLines@1000000000();
    VAR
      SalesInvoiceLine@1000000000 : Record 113;
    BEGIN
      SalesInvoiceLine.MODIFYALL("VAT Clause Code" , 'TEST');
    END;

    LOCAL PROCEDURE ChangeReportSelections@1000000003();
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84998 ForNAV Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=13:53:34;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=VAR
            ForNAVTest@1000000000 : Codeunit 84999;
          BEGIN
            ForNAVTest.RUN;
          END;

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 84999 ForNAV Test
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=08:56:33;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    PROCEDURE TestDiscountForDocument@1000000000();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesLine@1000000000 : Record 37;
      ForNAVCheckDocumentDiscount@1000000002 : Codeunit 84000;
    BEGIN
      // IF SalesHeader.FINDSET THEN REPEAT
      //  SalesLine.SETRANGE("Document No.", SalesHeader."No.");
      //  SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
      //  SalesLine.SETFILTER("Line Discount %", '<>0');
      //  IF SalesLine.ISEMPTY THEN BEGIN
      //    IF ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
      //      ERROR('No Discount expected for record ' + FORMAT(SalesHeader));
      //  END ELSE BEGIN
      //    IF NOT ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
      //      ERROR('Discount expected for record ' + FORMAT(SalesHeader));
      //  END;
      // UNTIL SalesHeader.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestCreateVATAmoutLine@1000000001();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesInvoiceHeader@1000000003 : Record 112;
      VATAmountLine@1000000000 : TEMPORARY Record 290;
      ForNAVGetVatAmountLines@1000000002 : Codeunit 84001;
    BEGIN
      IF SalesHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesHeader, VATAmountLine);
      UNTIL SalesHeader.NEXT = 0;

      IF SalesInvoiceHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesInvoiceHeader, VATAmountLine);
      UNTIL SalesInvoiceHeader.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT MenuSuite 1060 Dept - Add-on 10
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:15:50;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  MENUNODES
  {
    {                ;[{7FD6154D-F047-4A31-B857-0DA1E0BA97D8}] ;NextNodeID=[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] }
    { MenuItem       ;[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] ;Name=Document Sending Profiles;
                                                                CaptionML=[ENU=Document Sending Profiles;
                                                                           NLD=Verzendprofielen van documenten];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=359;
                                                                Visible=Yes;
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{379BBC3B-5EBB-4617-8419-8D76352F8337}] ;Name=Electronic Document Formats;
                                                                CaptionML=[ENU=Electronic Document Formats;
                                                                           NLD=Elektronische documentindelingen];
                                                                ApplicationArea=#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=363;
                                                                Visible=Yes;
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{8A3934DD-BE0A-4851-B8E0-50A64106B98A}] ;Name=Data Exchange Types;
                                                                CaptionML=[ENU=Data Exchange Types;
                                                                           NLD=Typen gegevensuitwisseling];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1213;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{0D3D0EB4-59D7-4D3E-95AC-49CD269C6C04}] ;Name=Data Migration Settings;
                                                                AccessByPermission=TableData 1806=R;
                                                                CaptionML=[ENU=Data Migration Settings;
                                                                           NLD=Instellingen van gegevensmigratie];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1807;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{00646221-3EEF-4883-8640-FECFD9BEC705}] ;Name=Report Configuration;
                                                                AccessByPermission=TableData 2000000196=IMD;
                                                                CaptionML=[ENU=Report Settings;
                                                                           NLD=Rapportinstellingen];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1560;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{A1E3A413-B0C4-4D20-8B1F-AFF7DFFDB43C}] ;Name=Setup and Help Resources;
                                                                CaptionML=[ENU=Setup and Help Resources;
                                                                           NLD=Instellings- en Help-resources];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1822;
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    {                ;[{19A352FE-D90D-424E-B85F-CF3B8E98CF0E}] ;NextNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}] }
    { Menu           ;[{0691571E-EDD6-473D-A139-81B1E9B887F2}] ;Name=ForNAV;
                                                                CaptionML=ENU=ForNAV;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                Image=15;
                                                                IsShortcut=No;
                                                                Visible=Yes;
                                                                Enabled=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{E849D80C-A6A0-4A75-9313-4A9691856383}] }
    { MenuItem       ;[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] ;Name=ForNAV Setup;
                                                                CaptionML=ENU=ForNAV Setup;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Page;
                                                                RunObjectID=84000;
                                                                ParentNodeID=[{E849D80C-A6A0-4A75-9313-4A9691856383}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    { MenuGroup      ;[{E849D80C-A6A0-4A75-9313-4A9691856383}] ;Name=Application Setup;
                                                                CaptionML=ENU=Application Setup;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] }
  }
}
OBJECT Page 84000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:17:14;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table84000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1000000002;1;Group  ;
                Name=VAT;
                GroupType=Group }

    { 1000000003;2;Field  ;
                SourceExpr="VAT Amount Specification" }

    { 1000000004;1;Group  ;
                Name=Legal Clause;
                GroupType=Group }

    { 1000000005;2;Field  ;
                SourceExpr="Legal Conditions";
                MultiLine=Yes }

    { 1000000006;0;Container;
                ContainerType=FactBoxArea }

    { 1000000007;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000008;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {

    BEGIN
    END.
  }
}

