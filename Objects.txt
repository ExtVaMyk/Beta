OBJECT Table 84000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=16:48:59;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10         }
    { 10  ;   ;VAT Amount Specification;Option    ;OptionString=Multiple Lines,Always,Never }
    { 80  ;   ;Legal Conditions    ;Text250        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000000();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 84999 ForNAV Document Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=15:54:39;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              NLD=Btw %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 2   ;   ;VAT Base            ;Decimal       ;CaptionML=[ENU=VAT Base;
                                                              NLD=Basisbedrag btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 3   ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              NLD=Btw-bedrag];
                                                   AutoFormatType=1 }
    { 4   ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              NLD=Bedrag incl. btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              NLD=Btw-identificatie];
                                                   Editable=No }
    { 6   ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              NLD=Regelbedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Inv. Disc. Base Amount;Decimal     ;CaptionML=[ENU=Inv. Disc. Base Amount;
                                                              NLD=Basisbedrag factuurkorting];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 8   ;   ;Invoice Discount Amount;Decimal    ;CaptionML=[ENU=Invoice Discount Amount;
                                                              NLD=Bedrag factuurkorting];
                                                   AutoFormatType=1 }
    { 9   ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              NLD=Btw-berekening];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    NLD=Normaal,Verlegging,Volledig,Sales tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 10  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              NLD=Tax Group Code];
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NLD=Aantal];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;CaptionML=[ENU=Modified;
                                                              NLD=Gewijzigd] }
    { 13  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              NLD=Use Tax] }
    { 14  ;   ;Calculated VAT Amount;Decimal      ;CaptionML=[ENU=Calculated VAT Amount;
                                                              NLD=Berekend btw-bedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              NLD=Btw-verschil];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              NLD=Positief] }
    { 17  ;   ;Includes Prepayment ;Boolean       ;CaptionML=[ENU=Includes Prepayment;
                                                              NLD=Inclusief vooruitbetaling] }
    { 18  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              NLD=Code btw-clausule] }
    { 19  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              NLD=Belastingcategorie] }
    { 84000;  ;Line No.            ;Integer        }
    { 84001;  ;Amount              ;Decimal        }
    { 84002;  ;Allow Invoice Disc. ;Boolean        }
    { 84003;  ;Inv. Discount Amount;Decimal        }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForRecRef@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      Fld@1000000002 : Record 2000000041;
    BEGIN
      FindAndSetField(RecRef, 'Line No.', 84000);

      Fld.SETRANGE(TableNo, DATABASE::"ForNAV Document Line Buffer");
      Fld.SETFILTER("No.", '<>84000');
      Fld.FINDSET;
      REPEAT
        FindAndSetField(RecRef, Fld.FieldName, Fld."No.");
      UNTIL Fld.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAndSetField@1000000004(VAR RecRef@1000000003 : RecordRef;FieldName@1000000002 : Text;FieldNo@1000000004 : Integer);
    VAR
      FldRef@1000000001 : FieldRef;
      Fld@1000000000 : Record 2000000041;
      ThisRecRef@1000000006 : RecordRef;
      ThisFld@1000000005 : FieldRef;
    BEGIN
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, FieldName);
      IF NOT Fld.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Fld."No.");

      //ThisRecRef.OPEN(DATABASE::"ForNAV Document Line Buffer", TRUE);
      ThisRecRef.GETTABLE(Rec);
      ThisFld := ThisRecRef.FIELD(FieldNo);
      ThisFld.VALUE := FldRef.VALUE;
      // IF FieldNo = 84000 THEN
      //  ThisRecRef.INSERT
      // ELSE
      //  ThisRecRef.MODIFY;
      ThisRecRef.SETTABLE(Rec);
      IF FieldNo = 84000 THEN
        INSERT
      ELSE
        MODIFY;
    END;

    BEGIN
    END.
  }
}

OBJECT Report 84000 ForNAV Sal. Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>38f89da9-8391-4c5d-9ab9-85940cd4e51a</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>0efb14d6-ca81-4ced-b0a8-62066ad1eddf</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84001 ForNAV Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>c5caafec-a706-4192-b53f-4f7b9b86438b</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>8d5c39c1-21d0-4ef9-bbd4-214af28ef818</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84002 ForNAV Sales Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>203f7736-f731-4f83-bfbe-03a0ef9d7f44</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>ce962da7-ad29-426d-82b2-1252f89ceefc</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84100 ForNAV Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>bec935ec-fa61-4e42-9c7f-6e63005aef86</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>e5e27a1b-d873-4b68-9349-185f0d12df68</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84101 ForNAV Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>7b8eb9f0-693f-4eaa-a253-26c9929ea599</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>1c545f5a-9e74-41b1-b0f9-808fdb0d3d70</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 84201 ForNAV Reminder
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table297;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
                                 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"No.");
              END;
           'Restore': BEGIN
                 "No." := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>294f9a06-a98e-422b-b6f5-1ba115b2438e</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>d5e894e8-8c62-4500-9cbc-e5dd58629517</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Codeunit 84000 ForNAV Check Document Discount
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:54:50;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE HasDiscount@1000000001(Rec@1000000000 : Variant) : Boolean;
    VAR
      RecRefLib@1000000002 : Codeunit 84090;
      TestValidDociFace@1000000003 : Codeunit 84080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      EXIT(CheckLinesTableForDiscount(RecRef, FindDiscountFieldNoInLines(RecRef)));
    END;

    LOCAL PROCEDURE FindDiscountFieldNoInLines@1000000009(RecRef@1000000001 : RecordRef) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      NoDiscountFieldErr@1000000002 : TextConst 'ENU=The connected line table does not contain a valid field for Line Discount.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE(FieldName, 'Line Discount %');
      IF NOT Field.FINDFIRST THEN
        ERROR(NoDiscountFieldErr);

      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE CheckLinesTableForDiscount@1000000011(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      RecRefLib@1000000004 : Codeunit 84090;
      LineRec@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');

      FldRef := LineRec.FIELD(FieldNo);
      FldRef.SETFILTER('<>0');
      EXIT(NOT LineRec.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84001 ForNAV Get Vat Amount Lines
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:43:06;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatAmountLines@1000000000(Rec@1000000000 : Variant;VAR VATAmountLine@1000000001 : TEMPORARY Record 290);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 84999;
      RecRefLib@1000000002 : Codeunit 84090;
      TestValidDociFace@1000000004 : Codeunit 84080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATAmountLine);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATAmountLine);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATAmountLine@1000000000 : Record 290);
    VAR
      NotTempErr@1000000001 : TextConst 'ENU=When using this function the Vat Amount Line table should be declared as temporary.';
    BEGIN
      WITH VATAmountLine DO
        IF NOT ISTEMPORARY THEN
          ERROR(NotTempErr);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 84999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 84090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 84999;VAR VATAmountLine@1000000000 : Record 290);
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATAmountLine.INIT;
          VATAmountLine."VAT Identifier" := "VAT Identifier";
          VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
          VATAmountLine."Tax Group Code" := "Tax Group Code";
          VATAmountLine."VAT %" := "VAT %";
          VATAmountLine."VAT Base" := Amount;
          VATAmountLine."Amount Including VAT" := "Amount Including VAT";
          VATAmountLine."Line Amount" := "Line Amount";
          IF "Allow Invoice Disc." THEN
            VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
          VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
          VATAmountLine."VAT Clause Code" := "VAT Clause Code";
          IF ("VAT %" <> 0) OR ("VAT Clause Code" <> '') OR (Amount <> "Amount Including VAT") THEN
            VATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84002 ForNAV Get Vat Clause
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:55:11;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TryGetVATClause@1000000000 : Integer;

    PROCEDURE GetVATClauses@1000000000(VAR VATAmountLine@1000000001 : TEMPORARY Record 290;VAR VATClause@1000000000 : Record 560;LanguageCode@1000000002 : Code[10]);
    BEGIN
      WITH VATAmountLine DO
        IF FINDSET THEN REPEAT
          TryGetVATClauseText(VATClause, "VAT Clause Code", LanguageCode);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE TryGetVATClauseText@1000000002(VAR VATClausePar@1000000000 : Record 560;VATClauseCode@1000000002 : Code[10];LanguageCode@1000000003 : Code[10]);
    VAR
      VATClause@1000000001 : Record 560;
    BEGIN
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;

      VATClause.TranslateDescription(LanguageCode);

      VATClausePar := VATClause;
      IF VATClausePar.INSERT THEN;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84020 ForNAV Replace Report Sel.
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=18:13:26;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ReplaceSalesOrderConfirmation;
            ReplaceSalesInvoice;
            ReplaceSalesCreditMemo;
            ReplacePurchaseOrderConfirmation;
            ReplacePurchaseInvoice;
            ReplaceReminder;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ReplaceSalesOrderConfirmation@1000000001();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Sal. Order Confirmation');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesInvoice@1000000000();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesCreditMemo@1000000002();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Credit Memo');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseOrderConfirmation@1000000005();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Order');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseInvoice@1000000003();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminder@1000000006();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::Reminder);
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::Reminder;
        Sequence := '1';
        "Report ID" := FindReportID('Reminder');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindReportID@1000000004(ReportName@1000000001 : Text) : Integer;
    VAR
      Obj@1000000000 : Record 2000000001;
    BEGIN
      WITH Obj DO BEGIN
        SETRANGE(Type, Obj.Type::Report);
        SETRANGE(Name, 'ForNAV ' + ReportName);
        FINDFIRST;
        EXIT(ID);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84080 ForNAV Test Valid Doc iFace
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:31:55;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ThrowErrorIfNotValid@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      IsValid@1000000001 : Boolean;
      NotValidTableErr@1000000002 : TextConst 'ENU="This table (ID = %1) is not supported for this function."';
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          EXIT;
        DATABASE::"Sales Shipment Header":
          EXIT;
        DATABASE::"Sales Invoice Header":
          EXIT;
        DATABASE::"Sales Cr.Memo Header":
          EXIT;
      END;

      CheckForValidPartnerTables(RecRef, IsValid);
      IF IsValid THEN
        ERROR(NotValidTableErr);
    END;

    [Business]
    LOCAL PROCEDURE CheckForValidPartnerTables@1000000007(RecRef@1000000001 : RecordRef;VAR IsVaild@1000000000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84090 ForNAV RecordRef Library
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=16:54:07;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ConvertToRecRef@1000000002(VAR Rec@1000000000 : Variant;RecRef@1000000001 : RecordRef);
    VAR
      WrongDataTypeErr@1000000002 : TextConst 'ENU=Runtime Error: Wrong Datatype. Please contact your ForNAV reseller.';
    BEGIN
      CASE TRUE OF
        Rec.ISRECORDREF:
          RecRef := Rec;
        Rec.ISRECORD:
          RecRef.GETTABLE(Rec);
        ELSE
          ERROR(WrongDataTypeErr);
      END;
    END;

    PROCEDURE FindAndFilterieldNo@1000000003(VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000004 : RecordRef;VAR FldRef@1000000001 : FieldRef;Value@1000000005 : Text);
    VAR
      Field@1000000003 : Record 2000000041;
      DocumentNoField@1000000002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, Value);
      IF NOT Field.FINDFIRST THEN
        EXIT;

      DocumentNoField := RecRef.FIELD(Field."No.");

      Field.RESET;
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE("No.", Field."No.");
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := LineRec.FIELD(Field."No.");
      FldRef.SETRANGE(DocumentNoField.VALUE);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84997 ForNAV Create Test Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=14:14:57;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateVATClause;
            ChangeVATPostingSetup;
            ChangeExistingSalesInvoiceLines;
            ChangeReportSelections;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreateVATClause@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeVATPostingSetup@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeExistingSalesInvoiceLines@1000000000();
    VAR
      SalesInvoiceLine@1000000000 : Record 113;
    BEGIN
      SalesInvoiceLine.MODIFYALL("VAT Clause Code" , 'TEST');
    END;

    LOCAL PROCEDURE ChangeReportSelections@1000000003();
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 84998 ForNAV Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=16-03-17;
    Time=13:53:34;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=VAR
            ForNAVTest@1000000000 : Codeunit 84999;
          BEGIN
            ForNAVTest.RUN;
          END;

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 84999 ForNAV Test
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=08:56:33;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    PROCEDURE TestDiscountForDocument@1000000000();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesLine@1000000000 : Record 37;
      ForNAVCheckDocumentDiscount@1000000002 : Codeunit 84000;
    BEGIN
      // IF SalesHeader.FINDSET THEN REPEAT
      //  SalesLine.SETRANGE("Document No.", SalesHeader."No.");
      //  SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
      //  SalesLine.SETFILTER("Line Discount %", '<>0');
      //  IF SalesLine.ISEMPTY THEN BEGIN
      //    IF ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
      //      ERROR('No Discount expected for record ' + FORMAT(SalesHeader));
      //  END ELSE BEGIN
      //    IF NOT ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
      //      ERROR('Discount expected for record ' + FORMAT(SalesHeader));
      //  END;
      // UNTIL SalesHeader.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestCreateVATAmoutLine@1000000001();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesInvoiceHeader@1000000003 : Record 112;
      VATAmountLine@1000000000 : TEMPORARY Record 290;
      ForNAVGetVatAmountLines@1000000002 : Codeunit 84001;
    BEGIN
      IF SalesHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesHeader, VATAmountLine);
      UNTIL SalesHeader.NEXT = 0;

      IF SalesInvoiceHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesInvoiceHeader, VATAmountLine);
      UNTIL SalesInvoiceHeader.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT MenuSuite 1060 Dept - Add-on 10
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:15:50;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  MENUNODES
  {
    {                ;[{7FD6154D-F047-4A31-B857-0DA1E0BA97D8}] ;NextNodeID=[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] }
    { MenuItem       ;[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] ;Name=Document Sending Profiles;
                                                                CaptionML=[ENU=Document Sending Profiles;
                                                                           NLD=Verzendprofielen van documenten];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=359;
                                                                Visible=Yes;
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{379BBC3B-5EBB-4617-8419-8D76352F8337}] ;Name=Electronic Document Formats;
                                                                CaptionML=[ENU=Electronic Document Formats;
                                                                           NLD=Elektronische documentindelingen];
                                                                ApplicationArea=#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=363;
                                                                Visible=Yes;
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{8A3934DD-BE0A-4851-B8E0-50A64106B98A}] ;Name=Data Exchange Types;
                                                                CaptionML=[ENU=Data Exchange Types;
                                                                           NLD=Typen gegevensuitwisseling];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1213;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{0D3D0EB4-59D7-4D3E-95AC-49CD269C6C04}] ;Name=Data Migration Settings;
                                                                AccessByPermission=TableData 1806=R;
                                                                CaptionML=[ENU=Data Migration Settings;
                                                                           NLD=Instellingen van gegevensmigratie];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1807;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{00646221-3EEF-4883-8640-FECFD9BEC705}] ;Name=Report Configuration;
                                                                AccessByPermission=TableData 2000000196=IMD;
                                                                CaptionML=[ENU=Report Settings;
                                                                           NLD=Rapportinstellingen];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1560;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{A1E3A413-B0C4-4D20-8B1F-AFF7DFFDB43C}] ;Name=Setup and Help Resources;
                                                                CaptionML=[ENU=Setup and Help Resources;
                                                                           NLD=Instellings- en Help-resources];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1822;
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    {                ;[{19A352FE-D90D-424E-B85F-CF3B8E98CF0E}] ;NextNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}] }
    { Menu           ;[{0691571E-EDD6-473D-A139-81B1E9B887F2}] ;Name=ForNAV;
                                                                CaptionML=ENU=ForNAV;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                Image=15;
                                                                IsShortcut=No;
                                                                Visible=Yes;
                                                                Enabled=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{E849D80C-A6A0-4A75-9313-4A9691856383}] }
    { MenuItem       ;[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] ;Name=ForNAV Setup;
                                                                CaptionML=ENU=ForNAV Setup;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Page;
                                                                RunObjectID=84000;
                                                                ParentNodeID=[{E849D80C-A6A0-4A75-9313-4A9691856383}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    { MenuGroup      ;[{E849D80C-A6A0-4A75-9313-4A9691856383}] ;Name=Application Setup;
                                                                CaptionML=ENU=Application Setup;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] }
  }
}
OBJECT Page 84000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=24-03-17;
    Time=17:17:14;
    Modified=Yes;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table84000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1000000002;1;Group  ;
                Name=VAT;
                GroupType=Group }

    { 1000000003;2;Field  ;
                SourceExpr="VAT Amount Specification" }

    { 1000000004;1;Group  ;
                Name=Legal Clause;
                GroupType=Group }

    { 1000000005;2;Field  ;
                SourceExpr="Legal Conditions";
                MultiLine=Yes }

    { 1000000006;0;Container;
                ContainerType=FactBoxArea }

    { 1000000007;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000008;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {

    BEGIN
    END.
  }
}

