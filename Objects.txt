OBJECT Table 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=02-06-17;
    Time=12:00:00;
    Version List=FORNAVCTP2;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10         }
    { 10  ;   ;VAT Amount Specification;Option    ;OptionString=Multiple Lines,Always,Never }
    { 80  ;   ;Legal Conditions    ;Text250        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000000();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    PROCEDURE ReplaceReportSelection@1(HideDialog@1000 : Boolean);
    VAR
      DoYouWantToQst@1001 : TextConst 'ENU=Do you want to replace the current reports with the ForNAV reports?';
      ReplaceReportSel@1002 : Codeunit 70029;
    BEGIN
      IF NOT HideDialog THEN
        IF NOT CONFIRM(DoYouWantToQst, TRUE) THEN
          EXIT;

      ReplaceReportSel.RUN;
    END;

    PROCEDURE RunTest@2();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV Test Runner");
    END;

    PROCEDURE DesignSalesTemplate@3();
    VAR
      ForNAVSalesTemplate@1000 : Report 70529;
    BEGIN
      ForNAVSalesTemplate.RUNMODAL;
    END;

    PROCEDURE DesignPurchaseTemplate@1000000001();
    VAR
      ForNAVPurchaseTemplate@1000 : Report 70528;
    BEGIN
      ForNAVPurchaseTemplate.RUNMODAL;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70999 ForNAV Document Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              NLD=Btw %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 2   ;   ;VAT Base            ;Decimal       ;CaptionML=[ENU=VAT Base;
                                                              NLD=Basisbedrag btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 3   ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              NLD=Btw-bedrag];
                                                   AutoFormatType=1 }
    { 4   ;   ;Amount Including VAT;Decimal       ;CaptionML=[ENU=Amount Including VAT;
                                                              NLD=Bedrag incl. btw];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              NLD=Btw-identificatie];
                                                   Editable=No }
    { 6   ;   ;Line Amount         ;Decimal       ;CaptionML=[ENU=Line Amount;
                                                              NLD=Regelbedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Inv. Disc. Base Amount;Decimal     ;CaptionML=[ENU=Inv. Disc. Base Amount;
                                                              NLD=Basisbedrag factuurkorting];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 8   ;   ;Invoice Discount Amount;Decimal    ;CaptionML=[ENU=Invoice Discount Amount;
                                                              NLD=Bedrag factuurkorting];
                                                   AutoFormatType=1 }
    { 9   ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              NLD=Btw-berekening];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    NLD=Normaal,Verlegging,Volledig,Sales tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 10  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              NLD=Tax Group Code];
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NLD=Aantal];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;CaptionML=[ENU=Modified;
                                                              NLD=Gewijzigd] }
    { 13  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              NLD=Use Tax] }
    { 14  ;   ;Calculated VAT Amount;Decimal      ;CaptionML=[ENU=Calculated VAT Amount;
                                                              NLD=Berekend btw-bedrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              NLD=Btw-verschil];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              NLD=Positief] }
    { 17  ;   ;Includes Prepayment ;Boolean       ;CaptionML=[ENU=Includes Prepayment;
                                                              NLD=Inclusief vooruitbetaling] }
    { 18  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              NLD=Code btw-clausule] }
    { 19  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              NLD=Belastingcategorie] }
    { 70000;  ;Line No.            ;Integer        }
    { 70001;  ;Amount              ;Decimal        }
    { 70002;  ;Allow Invoice Disc. ;Boolean        }
    { 70003;  ;Inv. Discount Amount;Decimal        }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForRecRef@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      Fld@1000000002 : Record 2000000041;
    BEGIN
      FindAndSetField(RecRef, 'Line No.', 70000);

      Fld.SETRANGE(TableNo, DATABASE::"ForNAV Document Line Buffer");
      Fld.SETFILTER("No.", '<>70000');
      Fld.FINDSET;
      REPEAT
        FindAndSetField(RecRef, Fld.FieldName, Fld."No.");
      UNTIL Fld.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAndSetField@1000000004(VAR RecRef@1000000003 : RecordRef;FieldName@1000000002 : Text;FieldNo@1000000004 : Integer);
    VAR
      FldRef@1000000001 : FieldRef;
      Fld@1000000000 : Record 2000000041;
      ThisRecRef@1000000006 : RecordRef;
      ThisFld@1000000005 : FieldRef;
    BEGIN
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, FieldName);
      IF NOT Fld.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Fld."No.");

      ThisRecRef.GETTABLE(Rec);
      ThisFld := ThisRecRef.FIELD(FieldNo);
      ThisFld.VALUE := FldRef.VALUE;

      ThisRecRef.SETTABLE(Rec);
      IF FieldNo = 70000 THEN
        INSERT
      ELSE
        MODIFY;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Report 70000 ForNAV Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Order Confirmation;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>d2520048-fae5-44d5-87d0-bc09e0ab7593</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>9c2e99c5-a4c0-485e-ba2c-c688eaee3d21</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70001 ForNAV Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invoice;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>bd606e15-4953-4318-bd23-73b196b4e368</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>44dabdc7-3a01-474b-ad72-250009ac8c43</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70002 ForNAV Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Credit Memo;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>72e67257-07df-49ee-8af8-32a696182a45</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>518a4241-6b97-4921-a715-6947fa946ae4</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70003 ForNAV Sales Shipment
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:55:33;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Shipment;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table110;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                END;

               ReqFilterFields=No.,Posting Date }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table111;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>7e7759c6-dd03-4f8b-931d-b7dc25f6e4d0</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>5897cad5-a854-4c78-aecb-c4b1a0da18d5</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70004 ForNAV Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Quote;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>JpsAAO1de4/ctnb/v0C/gzoF6gSdyHxTvNd7L9ZrO1nUXm+8GycoLnChkTj21LOjrUZje4P+0U/TD9ZPUlKv0YPSkDOzaxdxAiQ7EkWRv3N4eB48R0/++vlm6X2U6XqRrE4m0AcTT66iJF6s3p1MNtn8h2Dy17/84z88+S1LwzfyNkmz9cvwLtlkVzJdhMvF7zL1tn++rTsiPvKp7q11aeJdhDfyZFL29CJJL8KPE+8sWWVpsry+u1X3nsmPzz/fpnK99hsv9X85b/xEU2+g2Uf9mmn1Vu/Eq0Yy9c42y2yTSnVtJTfqkeXUu9zMlovo3+TddfJB6tYxj8JABgjwOZEEqPE/W6xvl+FdMW494NO33lW4lGvv502SyYnXmks9W+QD9S9EhE6817P/kFF2kZxMOACATLwXC7mMf5UzBdzHRSR/SZcnk5//9Lei979dhzPVvZ99zibeZfhO/iQX795nqkvBQXHl10WcvVcXoB7gqzB9t1it1U8gpl5Apx4CIP+PepEC9mRyqskz9cRtNvWi92F6JbMTPbPbhXqIkmoKv6wWqvG1XGXv16/np68Wy+XiRmYyVTNYXaayaPUqXKtLV1G6uM06gFzLGwWVwkQxjOc9eRqu4nX+p/pxnskbWFL/JxnGutcW2Qv8noVZqJvqZxWzyE96upcyfSOjJI1PJlm6UZCfhcsox1DN+vQm2awy73wVLTeaa723p9fT4uLEu06ycFm1ZGDK4MT7MU02t60bWGFRvvdtmLbHWN3IiaLQ0f/DrHP97UJ+OplcvX5zfX7x43cXif+9xvQ/XyyWCqrqLery9DJZZ3qMzzRKav63C6nuQEWMczU5pJ9ay0zP+WJzM5NpNeEc/+qVFfaTEtsO1A2438h5PjsD0MX8SpjzGT9Los2NIn4985o9nobRh7NkmajhPFW8mBNgdfU+Xaw+nEzm4XKtrlyqX4o3Pr9eRZpeegrte69Xz5WYuStuFLMqWUmtjXzJGHlp2h3W6XKZfCogeJ6mSbquertavFuFeoGfTCQLQxnLCM1lJBGTlOEZDGM0m4cUzgIgkJzFSOiHipebESgW3gvNOdTnhDGCJw2QFcwlsOvW1Tb8xAj/tfycPU0+V9iXP6mexe9SvREL7jPGgikNfKKWMqDBxHuZRKEe7YtlEmp54GOMoYBTr2xEsGiSrVj8V/JdIr1fzpVouNUrQr3pZPK///0/ivnuCjZW4iDn0WIoZ5s0LVa6f5Up9gjT+Cy81a9d+/kznbmq2V5ld0upiJyki+yumLWayS9rWYyg5ILHXZAe5yiZoENFJ8wBOrzFjiDqEwEFJ1MtfTuoQRwAPyAwULBh6DOiRDTbCZt6tayWwFIthwLI06XiOc0xJ5NXizheyjeaYRTjJOnv+T210xVXatgvwzv9wLVMb9bP5DrnYzU4EyUKNvTzKy+T5MPmdu0PPW5FFN4nSv67ntr2Ymd2oyREJhLi4pWBCwnJlv0RMNIOEOSrzVkgB+JNvbWG4uRpsoyHCNkjTcny+5CletSKJMKSJGbksQl5UvSsNxV76LEL9CRgGvqjAf9sI4sNcRzsWgxV7a0QhvAgiIkJYlp2jVwghh2IfSXVARsHmhybx6stzg3v5kN2oOODQKcm0FnZtcuGikQbdOIzKoI+d4NCnohAAUyOhfXrVEF5kVjDXLW3Q9iwwzogzEwI87Jrl30XURNbYxPCpdigx8JXKfpv5LvFWplyuQ5nj3T/STvMbTdQM+bchHlQdu2yUaKutB7B/OgS5GyzzpIbmTrukN3H7AA/bHsMTICLomvksj3qxgOKea5zDyrmYE/FcoBvLxLvX71Hf/Ieqf+VDRy43vy0FSHQYZuoMNpHoOzbZRdFWy0fgClCQLE+RgE08T6kwhdC0Wq3VbRTvb9Obl/KeZa7s7JStVfXWqp+0aBPvtzhsPafLpbLv2fJaRxrp9UuqpkfsiOW7ebrqOdDYCRjaecil315q+lTZVoLIThlNTWZyWgDDYLyXVv0PRBUSb4Ryp0lN7fh6u58NU/Sm3zgLSq6kc92Z3cln9HUhqWtjZyM7Qb5mN58IEJTAXzIzQJRk69otlsk2mxEe9jdI9tVw+PhtDuhe7KnodGghqVFjcyawuUi0r6vBq22V/rSUQvPNiVKegp1AwdgAOYz9XfuGNviXF3aWtHFa/Me8yDCvyfJzflN+M5obxgWTtWBHQ2EO7xGqxmWZjN20Qu2Jh2iUKsFtFILoHZmdFcBpURrBohOveZieTjX0wANtvyfN7ECHttqBK7UMRrcsLS4sZOugFouQUgDioXJt4Fx4AMEOIIOCvOxCFNu+uVGX6nJo2pdv60dye5LLzCa67C017GTvU7MJBvwlbQIV1iXD+rMdbFA97Q58X1pA0YPACxdANjJBRB0iUZ4UPpaBET93aciW4Ac3C5HJNtux4yTKwbflx5gdBjA0mOAnVzrwEii0ejIg0tCe/eku0MS23oSXGlk9DHA0slAnHzwve2KMThAI6i0B2rtiD8mgXa66p2c8+S+tIi2x+HJY0Ogth9/bMYeiVnTyA26F0mStWPnjcvjgfPLMC6O1oBp8W/ebix43g+1W4XNWyNqhMbDiMM4BAzOeARiBgNEAgHi+ZwTEvB5wCQJsGSoExpvdVfHxdXTamcWSs7vERfHFXhX78NbCY1w57caxiYu9Gc0pT4SkEFGDGo2Bkjr4gxPPciZz2EASNCydXSvxWs0q79crGStjdW/r7JUZtH76nTB6eqdPv8hgImxdX/lrKrui6kVXblHvvWqt3emNMwQIjRCmJPcEIFCGI3xHB/EioMDUASB3sJsDw5ch5+r4zVupwe2D9rJBmZ7hmAsAE24C5KgYdAVECKTGQe1yypQeySEzA+w4GwXfm2vxtallONRn11SOuKIZDU0tgMysAVyLJ5MhMteJrqWseK20jTmxi0NgIJxD8R0lP/0mS/tAve+a7jAO1GKNJWr6O4siaVu+f0jZybf6yV2Z2qALR3HgtbULGkH6Mi7ogXiSrJQNC573Rx99ZK42sxyDF2Br5+zwxLZYjkWi6bms3UDWDJH4bIngMPCuSVHLHEitjiNRZSpy3aGAwec+D6b2KA8/aGNkIso/mEfcK13OG6rzqKuOltug9S8DfY12eIK3qHFKhtCnq+eJlmW3FQa0tApz3tQbutBNhRbNpeSc84AnYfBTFBA4YxiSJBSd1Gk/uaIzzgNO4pt3VWt1CLFT5yDwF2lpU5B/K04UApqHkVBZAox97lQKrkxork7nOzqtn+1WWYLraVW1CpWyHcmv/z7ZCUvEs/7pxPv0SPvr95Q0KsWydUTejcsws4j3epG/1U0fPS9+vUv//z52Z/Vf07/bBrM87+/ChdL+6GU7UdH0mhjP5CfkhupWdoBlvqR0dG0WtmPp+dmtB9X/9HRAZqb24/0/Onphf3g8taj46lb2A/h6tfzF9e5GmY/kO0zo6PZNsuHYtpLvi2yb4vs2yI75iKz07rMrmAn9+JY0gJo+bXM0a+2XwvqcLw+r909R5bncZFCHUEP5cLSOVKWLqwxxwtzCdUS1FKGpk2V3nCwS2ANiUBj6hDbGkjnyixcRAecaXgp34VLNZl4kbOnSZgXiqq6trn1u82t2JKZo7MubDnmvmGkxZZmw7XDlpoSBrbUFGAPzZTUmimJra2Eu7YS8Zq978xOrH5dhqmijU7gqxLHWtmF+ohKL72weIUxuZCPJhdWoS9PpxPqXrwi3bB6RF36oBCT2sNkSGN8mdtazU5OXpw/f/msTFrUk+jmuHVzC2u4SquHmU3Lp0l81zQs9Vj1tR2W5fGNxe2LG9ZiJIgMQ4FjQXmo+BwFIsDxXF8miAJJCIwlj3DHWtz2tc0NxD418O6AudgDL6jwyTStu765397kLNBckjg/fsyn+XvNJ485ZaxtLBpGocbxJvlkGl9vjKI1RvXUwDDVnSZ1fy3zloFPGRcAIkzKP8zjKXCTSyNopoHxbni1HIfuozVkfWF0s2hHOPTRgMbgKeacUIUqQUifZukLf80W+UlsxaI/psmnUriNTGMgQc8QDu0KuVYfRm2kB1epmfDujjwGF7aHq5XGWOGGfIYohIQp+FDABR/ErfX4oQAaNtHdAHbVmB6ApUrDu8rcGIC7z7PUAP68CVeZmkN7ySCKCCAAQrVgCMSD+G2fHovpt4Hth/jdoTYfTLLTV/o06OouPRqUegzvnkwaXfMORNDVD5L5Kxmu89OrXUoQQQjhEAudeDVAiU4XD0sO8yGkfcnRjSD1yFFGk3jX5TlGDocgs8bz2WIdaWf6ZZT16EGxogYTEBXJAGZ69DoZo8jV++TT6012u1E3nt2twptFtC5VPtW1/1O4rro6OamqUBybhodYpn0adiNXPRqWUazAZRvdlb3XWVFqglF7NREMEAaBgAJgTtCwXGs8/qArKTCfSdqXCt24WI8KZYwscNmdd5/46oUDKxJAH1NCacBoAAO1lMgwBeoqKg8K/yF2cB/+7hnK5v0xXXNMtXryeEBzHnrIaISWt/IIjDKCNjerEgCyj9spMIdY+2VeNGXXx6/xYm2K1e9uWGMBnTEaEcklYpSw2TwAkoGIzeQM0ghyxmLC5iEzWGN1d9tDacDkS7C0xwLWWmsDa7Jpj9EyDJ3XYtoRsmuA/GO4WK1nSaqMhqeJPm28VsDn8dTDjLWAd421gTk8tLEWuGgKu7Ji2kcfagBPdVdGM475SpcWiCCGOYTa19aLfA4IwW4OrX0m4bBozNu7S0azelDP/nBhaWtJCheNAbqdYxkgptnIFH4QCLWTBQQzpv2R+9K11f2XIrAwax5HJLCtpStclBFdYeVwAveN4GLNKumPBGM4YFqC7EfdQRP54Uhr1mqOSFpbA1q4ODHQLq+ZFWkHTOtKJnNOMVBSWZ9R2o++44a3ImiprNpTeU/lVZidIkcks61hLlz8JNCNzP1skgHCD1rxzKcw4IJyKhAIKNub8rtM/MEFfkxzf0+R4JA2dkQGsvUKCBd9De5yF+/JQAYXAtOZH4BBBjjgQuy9Jwy7Fx5SXjikpR2RB2x9ErlNY88EbpWzTCQ30Kms7+p8bL/2d1AfATURxSoU4SLRdD+O2XckX469ILh3jfJB/StDsywO8zes6+Gpmmbk7LbZffoFgoHUgDRcrftOmcblB4+Pt97dcMoQChgJGMRxJGdyFgu1dMgsnhPB8IzOAxBgGnEtgFtOmVZ3W6cMo75QGz4O9vfNQEBaMqeLsLtzphwUeWAfDQS066QZmMtDO2kgcFEbg29eGpM0Mut1X8BNA4GTDudWmPEP7KeB4N49cbaOGtgr8ztKYrcqkH9ITw0cKBj8BVw1sFdgeJS4bvmyf3hfDRwoUvwFnDWwV9R4lNBu++43b81xxIJDIaYv4K6BvarNoyzkFmD75q+pueDLOO2sHTa9OtKj3v3DI3PfHDZH5q971yy/BocNAvfjsOmYP8il1AXclh2AFIyV9y6KEbusnanXTEEqP7+j9NzVRsbu3+CpHnTA26LaxRZXk+3RsjmQS9kLuC0hgmldBAZyQ00HQh1wHU3q2l3IbLjEQ/PomwPEhkIZTqt0yDTY4YQc/QQMGqi7oV10/dIPjctfxglpKFdG5yGN57EyLOkMo5AIQeZxLPAcYEa5pACROQ2Dbp5Oq7vaCSmADxhB/AAXpFOZbEIcRMpedXO+uGAxqEOHCGyXAhoENwVLVYV8DOT/1/Ll0LPhQ7J9h3wZ/f7RQLHsoaoycECs5Kv1Ns+idBUuDVExEwiHBKBoRuScC4lwFAgYCBmFXOAAxYJCNtPp2YYCMLAZq6A+Z4HoFjXMZ28rJ3R57Ea6rTkX2pBum9c1pKxfWUsn3QKfcI4FbeF45KTbggG3ibcwL0u6K/N2yy/OUbS2gfvkce9Tlj02LFmwGM/b0+tiLR03aRdO2RRPkSFzt/NCUwov0ucjR3J4VRfeeaxev5gvZDrVP/UXTTfLnOCeHvz0OvxcfKnU05bJVC11T13SHxBdZIuPsszVhaD8B07yvTRJw/TOlDy3M4sXDtTp7qbxqsF+kSze+r3Nkk8QRxwhSCMaUgJpTCCf8VnMZAw5ZILOJcNEis6Kr7s6Ug4vxO1wXlfpMsQlmTl9Fxwxaxdi1g0yDgzswYOMuJsxPuqkcMg4UpTdrqvmTAjHQQCo4AASgSg25vC1Vrbf6evAxFSILYpwtjpxi/ThbnXOUUgd0ocUDJ38u/2wzDs5FERiUQGzD6J1LI0M5LWbQXTMZuzmYe0FZLOjg8G0dAq0wbSOXZGBIw1mMHeFNNoceRQsG/0cDKVFlcw+lNbRoV416FEoHb4BrXfCcC0PB7Lo5WAYLeph9mEcjpB8rRl+UBeldk/xg8RsHvePkxVXhsyt+8vvq9/bUNJwHEWSzzEXMwACxhGZBSSYhTicc0ojoEyzYB6BrllWd1UraQHJPSRMSen9VTXSrmUyEDOzU9UQ9GE5oGPpbBR0dbaBET64ztYrGz1aPGTPwFJ5uO5+FLpeHb5jqnemetKWwYy6XzeNr1d7epQge6ZomQhyuDrYo8RRlENTqeq9SGCtL/bKWo+SYM9Uqh4JjqZM9s9mHEsfMhW23osU1tpmr771KCncslVGV8M9UOKIiik1WJ17EcJaV6UuhijeM2PERIgjKLI9MhxHrWUGq3UvInzdmq5FUgQzB+SH4gXowb2M9XubeRBMiADEgMwJjGAU04DLOY4iJDGYMzmbByKiEkXGuAI6npdRF1RtrJ8BgdctFThaKLD7ifLDlFeGu8rrwBgfXHllTscrd9rP9crNDwFthy8I4QAAqhhG15PUHqKDZce9JxRbK5zM5YChxbc4mihOvftTc46p2DC73I4j6pjM5UAf3u1G24H6V+hcY3ZH4o6oTDrVFbX4gvNuzL8mL5ypCOmRdcavR11p88RQ9LmpeJWHrmsSnC3DzfqwyLMpxlx1a4ovUzYeX9YR426AGB0cIObmU3/dAHEx8C8SI26+uqHASYQiPKdxGFBG5hwzBnnIeBgJQWMF5iyikDMx6yhwzd62OpxBSbLW4Hr1Y0e/DwQ7Xsjd5cX2Pc20swR+zY/N/Lv8XLU+Vm28iwYklns/9mekDi5Jexzvvi5Ra+PdH5I228P+3RZPivesu+IIesWnyGRpvG6PRyWbNJLPP9+m1Zo5ey+jD/X3k8ukmWYCzXeFVOrKD2D8Gtr2seaUNVzNcTYn35zSkzcyUrtK3ay5VnRR0oukqIlarsfe9z+272wpqrqAZ/5oMeze9xmqx9ReUr//yePfsjQsjkauX4Z3ySa7kulCLZrfZfqX/wM=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>233bb353-269c-4a6f-8d78-9574fc666695</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>1afae3ca-c139-40db-8350-993b6f5c47f9</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70100 ForNAV Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Order Confirmation;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>977fad2c-4388-4d02-bf06-8230ceaafb5a</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>9886f40f-d71f-41a6-9786-ef5f2ca3a9a9</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70101 ForNAV Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=21:09:17;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invoice;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>079a7a64-0c1b-4a3f-99ea-068a43f09291</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>a1b7dd10-f40c-4c57-aabf-1996da4ebc93</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70102 ForNAV Purchase Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:01;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Credit Memo;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table125;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>fe9101de-b94e-4e8a-9b21-82d1a7bfd939</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>e8437519-a012-4337-a165-5244fb43236e</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70104 ForNAV Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:02;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Quote;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>19c3b910-a0c8-4aad-8d1c-6c094059dda6</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>21cf56ec-31f9-463d-9e14-75001062d5bc</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70528 ForNAV Purchase Template
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:02;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=Invoice;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                   ERROR('');
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>825dca7d-98b0-4156-888b-ac2b001751ff</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>a3085f00-b80d-497c-b181-6c9bb68137f7</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70529 ForNAV Sales Template
{
  OBJECT-PROPERTIES
  {
    Date=14-06-17;
    Time=20:37:02;
    Version List=CTP2,FORNAV2.0.0.1245/1245;
  }
  PROPERTIES
  {
    CaptionML=ENU=ForNAV Sales Template;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                   ERROR('');
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=No. of Copies;
                  ToolTipML=ENU=Specifies how many copies of the document to print.;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1245, Version=2.0.0.1245, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>786c7cf0-a988-48da-8a3e-dcd4676a0aaf</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>37056983-281a-4672-9251-c9fb2637b15f</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Codeunit 70000 ForNAV Check Document Discount
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE HasDiscount@1000000001(Rec@1000000000 : Variant) : Boolean;
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000003 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      EXIT(CheckLinesTableForDiscount(RecRef, FindDiscountFieldNoInLines(RecRef)));
    END;

    LOCAL PROCEDURE FindDiscountFieldNoInLines@1000000009(RecRef@1000000001 : RecordRef) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      NoDiscountFieldErr@1000000002 : TextConst 'ENU=The connected line table does not contain a valid field for Line Discount.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE(FieldName, 'Line Discount %');
      IF NOT Field.FINDFIRST THEN
        ERROR(NoDiscountFieldErr);

      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE CheckLinesTableForDiscount@1000000011(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      RecRefLib@1000000004 : Codeunit 70090;
      LineRec@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');

      FldRef := LineRec.FIELD(FieldNo);
      FldRef.SETFILTER('<>0');
      EXIT(NOT LineRec.ISEMPTY);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70001 ForNAV Get Vat Amount Lines
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatAmountLines@1000000000(Rec@1000000000 : Variant;VAR VATAmountLine@1000000001 : TEMPORARY Record 290);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATAmountLine);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATAmountLine);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATAmountLine@1000000000 : Record 290);
    VAR
      NotTempErr@1000000001 : TextConst 'ENU=When using this function the Vat Amount Line table should be declared as temporary.';
    BEGIN
      WITH VATAmountLine DO
        IF NOT ISTEMPORARY THEN
          ERROR(NotTempErr);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR VATAmountLine@1000000000 : Record 290);
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATAmountLine.INIT;
          VATAmountLine."VAT Identifier" := "VAT Identifier";
          VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
          VATAmountLine."Tax Group Code" := "Tax Group Code";
          VATAmountLine."VAT %" := "VAT %";
          VATAmountLine."VAT Base" := Amount;
          VATAmountLine."Amount Including VAT" := "Amount Including VAT";
          VATAmountLine."Line Amount" := "Line Amount";
          IF "Allow Invoice Disc." THEN
            VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
          VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
          VATAmountLine."VAT Clause Code" := "VAT Clause Code";
          IF ("VAT %" <> 0) OR ("VAT Clause Code" <> '') OR (Amount <> "Amount Including VAT") THEN
            VATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70002 ForNAV Get Vat Clause
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TryGetVATClause@1000000000 : Integer;

    PROCEDURE GetVATClauses@1000000000(VAR VATAmountLine@1000000001 : TEMPORARY Record 290;VAR VATClause@1000000000 : Record 560;LanguageCode@1000000002 : Code[10]);
    BEGIN
      WITH VATAmountLine DO
        IF FINDSET THEN REPEAT
          TryGetVATClauseText(VATClause, "VAT Clause Code", LanguageCode);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE TryGetVATClauseText@1000000002(VAR VATClausePar@1000000000 : Record 560;VATClauseCode@1000000002 : Code[10];LanguageCode@1000000003 : Code[10]);
    VAR
      VATClause@1000000001 : Record 560;
    BEGIN
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;

      VATClause.TranslateDescription(LanguageCode);

      VATClausePar := VATClause;
      IF VATClausePar.INSERT THEN;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70009 ForNAV First Time Setup
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CheckIfSetupExists THEN
              EXIT;

            AskForDefault;
            RunWizardIfSetupDoesNotExist;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CheckIfSetupExists@2() : Boolean;
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      EXIT(ForNAVSetup.GET);
    END;

    LOCAL PROCEDURE AskForDefault@3();
    VAR
      SetDefaultsQst@1000 : TextConst 'ENU=Do you want to setup ForNAV with default values?';
      ForNAVSetup@1001 : Record 70000;
    BEGIN
      IF NOT CONFIRM(SetDefaultsQst, TRUE) THEN
        EXIT;

      ForNAVSetup.InitSetup;
      ForNAVSetup.ReplaceReportSelection(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE RunWizardIfSetupDoesNotExist@4();
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      IF ForNAVSetup.GET THEN
        EXIT;

      PAGE.RUNMODAL(PAGE::"ForNAV Setup Wizard");

      IF ForNAVSetup.GET THEN
        COMMIT;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70019 ForNAV Notifications
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,1,OnAfterFindPrinter,"",Skip,Skip)]
    LOCAL PROCEDURE OnFindPrinter@2(ReportID@1000 : Integer;VAR PrinterName@1001 : Text[250]);
    BEGIN
      ShowSetupNotification;
    END;

    LOCAL PROCEDURE ShowSetupNotification@1();
    VAR
      MyNotifications@1006 : Record 1518;
      ForNAVSetup@1001 : Record 70000;
      NotificationIDs@1004 : Codeunit 70022;
      MyNotification@1000 : Notification;
      ForNAVNotSetup@1002 : TextConst 'ENU=ForNAV is installed but not setup. Do you want to do this now?';
      Yes@1003 : TextConst 'ENU=Yes';
      NoAndDontAskAgain@1005 : TextConst 'ENU=No, and please don''t remind me again.';
    BEGIN
      IF ForNAVSetup.GET THEN
        EXIT;

      IF NOT MyNotifications.IsEnabled(NotificationIDs.SetupForNAV) THEN
        EXIT;

      MyNotification.ID := NotificationIDs.SetupForNAV;
      MyNotification.MESSAGE := ForNAVNotSetup;
      MyNotification.ADDACTION(Yes, CODEUNIT::"ForNAV Notification Actions", 'SetupForNAV');
      MyNotification.ADDACTION(NoAndDontAskAgain, CODEUNIT::"ForNAV Notification Actions", 'DisableSetup');
      MyNotification.SEND;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70020 ForNAV Notification Actions
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2(VAR MyNotification@1000 : Notification);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
    END;

    PROCEDURE DisableSetup@1(VAR MyNotification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
      NotificationID@1002 : GUID;
    BEGIN
      MyNotifications.LOCKTABLE;
      NotificationID := MyNotification.ID;
      IF MyNotifications.GET(USERID, NotificationID) THEN BEGIN
        MyNotifications.Enabled := FALSE;
        MyNotifications.MODIFY;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70021 ForNAV Initialize Notification
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState,"",Skip,Skip)]
    LOCAL PROCEDURE OnInitializingNotificationWithDefaultState@2();
    VAR
      MyNotifications@1000 : Record 1518;
      SetupForNAVTxt@1001 : TextConst 'ENU=Ask to setup ForNAV.';
      SetupForNAVDescriptionTxt@1002 : TextConst 'ENU=If you have ForNAV installed but don''t want to use it, switch off receiving the notification.';
      NotificationIDs@1003 : Codeunit 70022;
    BEGIN
      MyNotifications.InsertDefaultWithTableNum(NotificationIDs.SetupForNAV,
        SetupForNAVTxt,
        SetupForNAVDescriptionTxt,
        DATABASE::"ForNAV Setup");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70022 ForNAV Notification IDs
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2() : Text;
    BEGIN
      EXIT('cf8edf36-45c2-44c9-8367-cac5748bd597');
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70029 ForNAV Replace Report Sel.
{
  OBJECT-PROPERTIES
  {
    Date=02-06-17;
    Time=12:00:00;
    Version List=FORNAVCTP2;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ReplaceSalesOrderConfirmation;
            ReplaceSalesInvoice;
            ReplaceSalesCreditMemo;
            ReplaceSalesShipment;
            ReplaceSalesQuote;
            ReplacePurchaseOrder;
            ReplacePurchaseInvoice;
            ReplacePurchaseQuote;
            ReplacePurchaseCreditMemo;
            //ReplaceReminder;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE ReplaceSalesOrderConfirmation@1000000001();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Order Confirmation');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesInvoice@1000000000();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesCreditMemo@1000000002();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Credit Memo');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesShipment@1000000009();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Shipment");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Shipment";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Shipment');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesQuote@1000000008();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Quote');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseOrder@1000000005();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Order');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseQuote@1000000010();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Quote');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseInvoice@1000000003();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Invoice');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseCreditMemo@1000000007();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Credit Memo');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminder@1000000006();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::Reminder);
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::Reminder;
        Sequence := '1';
        "Report ID" := FindReportID('Reminder');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindReportID@1000000004(ReportName@1000000001 : Text) : Integer;
    VAR
      Obj@1000000000 : Record 2000000001;
    BEGIN
      WITH Obj DO BEGIN
        SETRANGE(Type, Obj.Type::Report);
        SETRANGE(Name, 'ForNAV ' + ReportName);
        FINDFIRST;
        EXIT(ID);
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70080 ForNAV Test Valid Doc iFace
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ThrowErrorIfNotValid@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      IsValid@1000000001 : Boolean;
      NotValidTableErr@1000000002 : TextConst 'ENU="This table (ID = %1) is not supported for this function."';
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          EXIT;
        DATABASE::"Sales Shipment Header":
          EXIT;
        DATABASE::"Sales Invoice Header":
          EXIT;
        DATABASE::"Sales Cr.Memo Header":
          EXIT;
      END;

      CheckForValidPartnerTables(RecRef, IsValid);
      IF IsValid THEN
        ERROR(NotValidTableErr);
    END;

    [Business]
    LOCAL PROCEDURE CheckForValidPartnerTables@1000000007(RecRef@1000000001 : RecordRef;VAR IsVaild@1000000000 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70090 ForNAV RecordRef Library
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ConvertToRecRef@1000000002(VAR Rec@1000000000 : Variant;RecRef@1000000001 : RecordRef);
    VAR
      WrongDataTypeErr@1000000002 : TextConst 'ENU=Runtime Error: Wrong Datatype. Please contact your ForNAV reseller.';
    BEGIN
      CASE TRUE OF
        Rec.ISRECORDREF:
          RecRef := Rec;
        Rec.ISRECORD:
          RecRef.GETTABLE(Rec);
        ELSE
          ERROR(WrongDataTypeErr);
      END;
    END;

    PROCEDURE FindAndFilterieldNo@1000000003(VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000004 : RecordRef;VAR FldRef@1000000001 : FieldRef;Value@1000000005 : Text);
    VAR
      Field@1000000003 : Record 2000000041;
      DocumentNoField@1000000002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, Value);
      IF NOT Field.FINDFIRST THEN
        EXIT;

      DocumentNoField := RecRef.FIELD(Field."No.");

      Field.RESET;
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE("No.", Field."No.");
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := LineRec.FIELD(Field."No.");
      FldRef.SETRANGE(DocumentNoField.VALUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70528 ForNAV Edit Layout
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    TableNo=9650;
    OnRun=BEGIN
            MESSAGE('1 Hello world from : ' + FORMAT(Rec));
          END;

  }
  CODE
  {

    [EventSubscriber(Page,9650,OnBeforeActionEvent,EditForNAV,Skip,Skip)]
    LOCAL PROCEDURE EditForNAVLayout@2(VAR Rec@1000 : Record 9650);
    BEGIN
      MESSAGE('Hello world from : ' + FORMAT(Rec));
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70997 ForNAV Create Test Setup
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateVATClause;
            ChangeVATPostingSetup;
            ChangeExistingSalesInvoiceLines;
            ChangeReportSelections;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreateVATClause@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeVATPostingSetup@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE ChangeExistingSalesInvoiceLines@1000000000();
    VAR
      SalesInvoiceLine@1000000000 : Record 113;
    BEGIN
      SalesInvoiceLine.MODIFYALL("VAT Clause Code" , 'TEST');
    END;

    LOCAL PROCEDURE ChangeReportSelections@1000000003();
    BEGIN
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70998 ForNAV Test Runner
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=VAR
            ForNAVTest@1000000000 : Codeunit 70999;
          BEGIN
            ForNAVTest.RUN;
          END;

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70999 ForNAV Test
{
  OBJECT-PROPERTIES
  {
    Date=13-06-17;
    Time=11:31:51;
    Version List=FORNAVCTP2;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    PROCEDURE TestDiscountForDocument@1000000000();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesLine@1000000000 : Record 37;
      ForNAVCheckDocumentDiscount@1000000002 : Codeunit 70000;
    BEGIN
      IF SalesHeader.FINDSET THEN REPEAT
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
        SalesLine.SETFILTER("Line Discount %", '<>0');
        IF SalesLine.ISEMPTY THEN BEGIN
          IF ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
            ERROR('No Discount expected for record ' + FORMAT(SalesHeader));
        END ELSE BEGIN
          IF NOT ForNAVCheckDocumentDiscount.HasDiscount(SalesHeader) THEN
            ERROR('Discount expected for record ' + FORMAT(SalesHeader));
        END;
      UNTIL SalesHeader.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestCreateVATAmoutLine@1000000001();
    VAR
      SalesHeader@1000000001 : Record 36;
      SalesInvoiceHeader@1000000003 : Record 112;
      VATAmountLine@1000000000 : TEMPORARY Record 290;
      ForNAVGetVatAmountLines@1000000002 : Codeunit 70001;
    BEGIN
      IF SalesHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesHeader, VATAmountLine);
      UNTIL SalesHeader.NEXT = 0;

      IF SalesInvoiceHeader.FINDSET THEN REPEAT
        ForNAVGetVatAmountLines.GetVatAmountLines(SalesInvoiceHeader, VATAmountLine);
      UNTIL SalesInvoiceHeader.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestReplaceReports@1000000002();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV Replace Report Sel.");
    END;

    [Test]
    PROCEDURE TestReports@1000000003();
    VAR
      Obj@1000000000 : Record 2000000001;
      PathObj@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
    BEGIN
      Obj.SETRANGE(Type, Obj.Type::Report);
      Obj.SETRANGE(ID, 70000, 70999);
      Obj.FINDSET;
      REPEAT
      //  REPORT.RUN(Obj.ID); ToDo
      UNTIL Obj.NEXT = 0;
    END;

    [ReportHandler]
    PROCEDURE HandleRequestPage@1000000004(VAR ForNAVOrderConfirmation@1000000000 : Report 70000);
    BEGIN
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT MenuSuite 1060 Dept - Add-on 10
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
  }
  MENUNODES
  {
    {                ;[{7FD6154D-F047-4A31-B857-0DA1E0BA97D8}] ;NextNodeID=[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] }
    { MenuItem       ;[{E55ED739-BBB9-4063-AF58-225E99C5FE72}] ;Name=Document Sending Profiles;
                                                                CaptionML=[ENU=Document Sending Profiles;
                                                                           NLD=Verzendprofielen van documenten];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=359;
                                                                Visible=Yes;
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{379BBC3B-5EBB-4617-8419-8D76352F8337}] ;Name=Electronic Document Formats;
                                                                CaptionML=[ENU=Electronic Document Formats;
                                                                           NLD=Elektronische documentindelingen];
                                                                ApplicationArea=#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=363;
                                                                Visible=Yes;
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{8A3934DD-BE0A-4851-B8E0-50A64106B98A}] ;Name=Data Exchange Types;
                                                                CaptionML=[ENU=Data Exchange Types;
                                                                           NLD=Typen gegevensuitwisseling];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1213;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{0D3D0EB4-59D7-4D3E-95AC-49CD269C6C04}] ;Name=Data Migration Settings;
                                                                AccessByPermission=TableData 1806=R;
                                                                CaptionML=[ENU=Data Migration Settings;
                                                                           NLD=Instellingen van gegevensmigratie];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1807;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{00646221-3EEF-4883-8640-FECFD9BEC705}] ;Name=Report Configuration;
                                                                AccessByPermission=TableData 2000000196=IMD;
                                                                CaptionML=[ENU=Report Settings;
                                                                           NLD=Rapportinstellingen];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1560;
                                                                Visible=Yes;
                                                                DepartmentCategory=Administration }
    { MenuItem       ;[{A1E3A413-B0C4-4D20-8B1F-AFF7DFFDB43C}] ;Name=Setup and Help Resources;
                                                                CaptionML=[ENU=Setup and Help Resources;
                                                                           NLD=Instellings- en Help-resources];
                                                                ApplicationArea=#Basic,#Suite;
                                                                RunObjectType=Page;
                                                                RunObjectID=1822;
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    {                ;[{19A352FE-D90D-424E-B85F-CF3B8E98CF0E}] ;NextNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}] }
    { Menu           ;[{0691571E-EDD6-473D-A139-81B1E9B887F2}] ;Name=ForNAV;
                                                                CaptionML=ENU=ForNAV;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                Image=15;
                                                                IsShortcut=No;
                                                                Visible=Yes;
                                                                Enabled=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{E849D80C-A6A0-4A75-9313-4A9691856383}] }
    { MenuItem       ;[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] ;Name=ForNAV Setup;
                                                                CaptionML=ENU=ForNAV Setup;
                                                                ApplicationArea=;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                RunObjectType=Page;
                                                                RunObjectID=70000;
                                                                ParentNodeID=[{E849D80C-A6A0-4A75-9313-4A9691856383}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Administration }
    { MenuGroup      ;[{E849D80C-A6A0-4A75-9313-4A9691856383}] ;Name=Application Setup;
                                                                CaptionML=ENU=Application Setup;
                                                                MemberOfMenu=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                ParentNodeID=[{0691571E-EDD6-473D-A139-81B1E9B887F2}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{CC9EF159-165D-4DCB-8A3B-05D408AB94F8}] }
  }
}
OBJECT Page 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=02-06-17;
    Time=12:00:00;
    Version List=FORNAVCTP2;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table70000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

    ActionList=ACTIONS
    {
      { 1       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;Action    ;
                      Name=ReplaceReports;
                      CaptionML=ENU=Replace Reportselection;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SwitchCompanies;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ReplaceReportSelection(FALSE);
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=RunTest;
                      CaptionML=ENU=Test;
                      ToolTipML=ENU=Running this test will tell you if the ForNAV reports work on your system;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TestDatabase;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 RunTest;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=DesignSalesTemplate;
                      CaptionML=ENU=Design Sales Template;
                      ToolTipML=ENU=Use this option to change the sales template, for example when you want to move the address or change the font.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Design;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 DesignSalesTemplate;
                               END;
                                }
      { 1000000009;1 ;Action    ;
                      Name=DesignPurchaseTemplate;
                      CaptionML=ENU=Design Purchase Template;
                      ToolTipML=ENU=Use this option to change the purchase template, for example when you want to move the address or change the font.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DesignCodeBehind;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 DesignPurchaseTemplate;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1000000002;1;Group  ;
                Name=VAT;
                GroupType=Group }

    { 1000000003;2;Field  ;
                SourceExpr="VAT Amount Specification" }

    { 1000000004;1;Group  ;
                Name=Legal Clause;
                GroupType=Group }

    { 1000000005;2;Field  ;
                SourceExpr="Legal Conditions";
                MultiLine=Yes }

    { 1000000006;0;Container;
                ContainerType=FactBoxArea }

    { 1000000007;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000008;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70005 ForNAV Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=01-05-17;
    Time=12:00:00;
    Version List=FORNAVBETA;
  }
  PROPERTIES
  {
    SourceTable=Table70000;
    PageType=NavigatePage;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 INIT;
                 IF ForNAVSetup.GET THEN BEGIN
                   TRANSFERFIELDS(ForNAVSetup);
                 END ELSE BEGIN
                   "VAT Amount Specification" := "VAT Amount Specification"::"Multiple Lines";
                 END;
                 INSERT;

                 Step := Step::Start;
                 EnableControls;
               END;

    ActionList=ACTIONS
    {
      { 19      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackActionEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(TRUE);
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextActionEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(FALSE);
                               END;
                                }
      { 8       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishActionEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 FinishAction;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 5   ;0   ;Container ;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryStandard.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 2   ;1   ;Group     ;
                Visible=TopBannerVisible AND FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 1   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryDone.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 11  ;1   ;Group     ;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 10  ;2   ;Group     ;
                CaptionML=ENU=Welcome to ForNAV Setup;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 9   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU="The ForNAV report package contains several documents that are optimized to work with our designer. " }

    { 7   ;2   ;Group     ;
                CaptionML=ENU=Let's go!;
                GroupType=Group }

    { 6   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next so you can set up the ForNAV report package. }

    { 15  ;1   ;Group     ;
                Visible=FinalStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                CaptionML=ENU=That's it!;
                GroupType=Group }

    { 12  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=To enable the ForNAV report package choose Finish. }

    { 21  ;1   ;Group     ;
                Visible=Step1Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Select your VAT printing preferences and legal clause. }

    { 22  ;2   ;Field     ;
                SourceExpr="VAT Amount Specification" }

    { 23  ;2   ;Field     ;
                SourceExpr="Legal Conditions" }

    { 17  ;1   ;Group     ;
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Do you want replace the current report selections with the ForNAV reports? }

    { 20  ;2   ;Field     ;
                Name=ReplaceReports;
                CaptionML=ENU=Replace Reports;
                SourceExpr=ReplaceReports }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1001 : Record 9400;
      MediaRepositoryDone@1000 : Record 9400;
      ForNAVSetup@1005 : Record 70000;
      TopBannerVisible@1003 : Boolean;
      FinalStepVisible@1002 : Boolean;
      FirstStepVisible@1004 : Boolean;
      FinishActionEnabled@1007 : Boolean;
      BackActionEnabled@1008 : Boolean;
      NextActionEnabled@1009 : Boolean;
      Step1Visible@1011 : Boolean;
      Step2Visible@1010 : Boolean;
      ReplaceReports@1012 : Boolean;
      Step@1006 : 'Start,Step1,Step2,Finish';

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      THEN
        TopBannerVisible := MediaRepositoryDone.Image.HASVALUE;
    END;

    LOCAL PROCEDURE EnableControls@2();
    BEGIN
      ResetControls;

      CASE Step OF
        Step::Start:
          ShowStartStep;
        Step::Step1:
          ShowStep1;
        Step::Step2:
          ShowStep2;
        Step::Finish:
          ShowFinishStep;
      END;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := TRUE;
      FinishActionEnabled := FALSE;
      BackActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowStep1@33();
    BEGIN
      Step1Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowStep2@34();
    BEGIN
      Step2Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := TRUE;
      NextActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      FinishActionEnabled := 1=1;
      BackActionEnabled := TRUE;
      NextActionEnabled := TRUE;

      FirstStepVisible := FALSE;
      Step1Visible := FALSE;
      Step2Visible := FALSE;
      FinalStepVisible := FALSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      IF Backwards THEN
        Step := Step - 1
      ELSE
        Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE FinishAction@12();
    BEGIN
      StoreForNAVSetup;
      //AssistedSetup.SetStatus(PAGE::"Email Setup Wizard",AssistedSetup.Status::Completed);
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE StoreForNAVSetup@3();
    BEGIN
      IF NOT ForNAVSetup.GET THEN BEGIN
        ForNAVSetup.INIT;
        ForNAVSetup.INSERT;
      END;

      ForNAVSetup.TRANSFERFIELDS(Rec,FALSE);
      ForNAVSetup.MODIFY;
      IF ReplaceReports THEN
        ForNAVSetup.ReplaceReportSelection(TRUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

