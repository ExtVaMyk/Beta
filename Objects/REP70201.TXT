OBJECT Report 70201 ForNAV Customer Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=08/01/17;
    Time=10:25:32 AM;
    Modified=Yes;
    Version List=FORNAV2.0.0.1260/1260;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Top 10 List;
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Customer Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Quantity;
                  ToolTipML=ENU=Specifies the number of customers that will be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>ASoAAO1a/W7byBH/v0DfYcuiZxunk8hdfibWBbZsX4TasiHJybVFYazIlc0LxVVJyrGuLdCn6YP1STrLL5EURVN2UqBAECQRl7OzM7/53F0ev3taeOiRBaHL/b6kdGUJMd/mjuvf96VVNP/BlN79+NvfHP8cBXTMljyIwku65qtowgKXeu6vLECbnx9yRmoXdzXBrTQkoRFdsL6UcrrgwYg+SmjA/Sjg3nS9hHdn7PH8aRmwMOwWFu3eDguPuIN2kD2KZTrZqqiPMkk6aLDyolXAYMxnK5jiddDNaua59h/Zeso/MUHtGDY1mYllY64yVQb5z9xw6dF1IrcQ+OQDcAojvgDNp3yJFBldumEkoZJSudq4K8MfBevA63r2C7OjEe9LhoxlRUIXLvOcj2wGCD66NrsNvL70EEXLN72eTx8d9vjGkFWzB2v2rs9oRHsDvlhSf314MBhfj24nf8Dy0I9Y4NMIFqMePF9GTvfgSEI39J69Z+79QwQyWIacjHx0negBBhSh2hUN7l0/hEcZ4Cn9A6KBTfrSibBsBxlL0O9s6QKppmaa3vouUEyZHz2E1/OTK9fz3AUDaUBR/yZgCdUVDWFoYgfuMsoBnLIFgBoxCVwLoeNT6jth/BMehhFbKKmfZEBXXCSBWAAiiMVsIKCeHcMJ+pxSj/o2Q4eXgz8ddUYsQoMH6t+nA6BJOnNKZx6wi/9TzMr4B5d97kuT6/F0OPrpsMrkCF2Pz87Hh2cstJkvwqXA99L1P/UlgdPfLlwP1H/PqCC5uiyNZuKOeLcj9O3kfnXDwwjo0U8BXy07A74C5de9MbsXPj3gDuvAUgwlbCQ0dMAwUgpgBc8CpmM270ukFkshIAsSJBPoE7sl40Xbn1L704B7PACYwb2YQN6fPASxynPqhTByA09g+KdrMMINC4Tjld9d++eQc9bJiyhYMeGMsZ9AfMRhU3GUTlmciXsPLg/B3Jfo3HA0iFrdsYltzgjTDV2dGXSOyZwYpmPZqjKf6QZMSnjXqZcEyoUIDKtrWUBdQA/wSxELS6NlXNVaXKfsKTrlTxmotyELhk4+OIGcCYsSReuI9HDJ7TiOLzxOIVYgEpVYHMsiVhaQE3bPGboddpC5jDrIfqCAWdSXiyYS/E88gGjBxJQr13E8dsnmEMPvefBr/KovJQOCti/951//TkRLfBg4xr6ZBWEQJLHczYjA5OCan1PbVVABXCbR2mNgaR640TrBR5MQzE6USF0Bniuipi96VZx7MdB16OOEu94G/fMnZq8EwFPIU1UjQLLvaAnaRp0pNu++siGm3KHrZ+yQ0LTC3Xg17rgOd5JwN2txv3FtEZwF6NO6NfTnPFjEyN6lRFtYQ2kCuEs4piYy4IUS20HXNXMHvGMRySV805Ec4HxhYBu3OX/mfDFcUJHLalDfkrybMWiFv7U33qQObzXhpshtHH3jKXcDuhQyl9y8PtfIOzw7FDr1T7nnCIKAZcnfg0LwamfPxWt094yqFeCKUuvxBdFfFgZqnVm0dE28p1luYm9LbaKAY3fB6xUMphE/ZEUjteUgdX6zvhzU2eeUB1DhRE/EI+gtnjVYi/DZFSgbe8Uk7YxF2hsrV+Vl9tPKJb1XU9O360yxxij1Jf6C86jcOkGfGJT65Uv2yKCz/wE88wbMwoZ+Yo2s92nql7a7q0LzI6u65igzRSeGgg1mWrZsUFWluqI6VMXW3LBnlmWaleYnFXDT9ehqVzMJUdX9+x5Fy9SeLGnwyXN9ptTilL+u8/uCBPWpaQPmB+qt2BVbzBh4B7TlSVd+B0154pXZq3zvsO2IMYtx3MwnOujbTiPIYAeAEhVOadCuLWnwK1z1q7SGKvVFdNuvkp41GW9uyXd7WU3nvZ/3terTMxmLfTqzFCxbqkKpY9uObmi2olDTZDAIAxi69rnlGPPaPj3jl3usosovcFWrTZZO9gR3cWaL918hZOv1XcRPHEccN+gl/+0ISVpX00I+nvLls8l4wPxE7U02zoauVl7kwj4zt2KSn/9S1648cJ+NOEK/66ODA/QO1dDE2qZlNsxnfI8O0Bv4+33dlJztG+SvPK+Dvvv909lb+OfkbQ31+d0Vdb32IqT0jRKkNOn6jcu/h0wgHHsPEPIpjTLkVK1Q+HAyFZv4MAriZ0CvtTjbUzO56gXbpm8l4fD0ZNReqJi6EZ+YotXKk4/Di6k429jDRps5jUJsyBJJ/trdSDKPz1AO5ys/zjro8JF6R+jvAYO05SN4ePvPo+4v3PUPD9A/0MFRXevzLeq+Rd23qPuqUddqN4Hl2t3EKzcOrRs8Um3w0k07rm+IT7mzLrZ34rnYErx4V2ARVXfkGaZzXZtpsmw46kxWNVMzGLZmTMUKk1XMqruCZP28xdJJV9u/x8L5HU8Un6pXNP95HJ+tb20BsNqJ13um+d/2gjH/XBVnSyRSEglm7JAK3hTx/5jenshdTTcs2KUQNf2xLUcCD/O2sKkVqLqRTNcX80uiigGlKFK1pbSWxZ35iBeFxsQkMsYmJpqCdcVS6zftySapK+Y+c6rbGHk1x7vbO6pisFRPc0tApTtuXD3WbQIK7wEUzCxCpcqqQTTdwoQkgDVDFc9+DVg1Z7LNYFWPYEtgpdtIXN1GNoFFWoKVK51eqSXb7A1yBCuaYlqmQVTFMLDS7GQlJq8B0NoXwOqZagnANE2T6tlqE4DqvgBWTipeCmGFzStAJDXnpM0gVk9As3e78t6uQD/u1WTt1rUWhuPN74B7q4Wf6oLLsm/LWzytJW3vQLdvP/e76yyc+xXKs7inZHgGydmcQZnWLc3WFXtOFRXTGZM1ZsnmXLVnlfK8dVf5sgJN1JIvVw+udxVocTb9tQo00aoFeodU/6sCTfapO9ozmaB8g/JMsSZE0zRLtnBjEii3468s3WTvatSmdJN9qpH+Qgh3lHGFYMPSCGnOpBUQX1vUyd41qU1RV/epScYLYNwBxxcp9w0sXwG0unfdalP81R0ppxZo88sB/YXagkamrwG75n7u/6FJqF75HffK30QdCyxjA+/4TErNy2TNFVO73qxXWL26XFGRomzHY2bzoPoxXCIRhHf86aC1+6OKbFEAL+dz3Gv4dvPH/wI=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>f791f994-7bee-4307-8181-9aff4c97830d</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>0111578a-8881-4f05-a837-221cb19a785a</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

