OBJECT Report 70202 ForNAV Vendor Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=08/01/17;
    Time=10:28:36 AM;
    Modified=Yes;
    Version List=FORNAV2.0.0.1260/1260;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Top 10 List;
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Vendor Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Quantity;
                  ToolTipML=ENU=Specifies the number of customers that will be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>8b16f5df-a310-4d83-bb98-786d693b7f03</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>b688741a-60ed-446a-b56e-467ff5a3a5a2</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

