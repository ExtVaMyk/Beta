OBJECT Report 70220 ForNAV Aged Accounts Receivbl.
{
  OBJECT-PROPERTIES
  {
    Date=21-07-17;
    Time=12:28:01;
    Modified=Yes;
    Version List=WIP,FORNAV2.0.0.1259/1259;
  }
  PROPERTIES
  {
    CaptionML=ENU=Aged Accounts Receivable;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  GLSetup.GET;
                  CalcDates;
                  CreateHeadings;
                  PageGroupNo := 1;
                  NextPageGroupNo := 1;
                  CustFilterCheck := (CustFilter <> 'No.');
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;Customer            ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Customer').NewPagePerRecord := NewPagePercustomer;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NewPagePercustomer THEN
                                    PageGroupNo += 1;
                                  TempCurrency.RESET;
                                  TempCurrency.DELETEALL;
                                  TempCustLedgEntry.RESET;
                                  TempCustLedgEntry.DELETEALL;
                                END;

               ReqFilterFields=No. }

    { 108 ;1   ;Column  ;FormatEndingDate    ;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO(Text006,FORMAT(EndingDate,0,4)) }

    { 110 ;1   ;Column  ;PostingDate         ;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO(Text007,SELECTSTR(AgingBy + 1,Text009)) }

    { 128 ;1   ;Column  ;PrintAmountInLCY    ;
               IncludeCaption=No;
               SourceExpr=PrintAmountInLCY }

    { 1   ;1   ;Column  ;TableCaptnCustFilter;
               IncludeCaption=No;
               SourceExpr=TABLECAPTION + ': ' + CustFilter }

    { 129 ;1   ;Column  ;CustFilter          ;
               IncludeCaption=No;
               SourceExpr=CustFilter }

    { 130 ;1   ;Column  ;AgingByDueDate      ;
               IncludeCaption=No;
               SourceExpr=AgingBy = AgingBy::"Due Date" }

    { 131 ;1   ;Column  ;PrintDetails        ;
               IncludeCaption=No;
               SourceExpr=PrintDetails }

    { 42  ;1   ;Column  ;GrandTotalCLE5RemAmt;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[5]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 43  ;1   ;Column  ;GrandTotalCLE4RemAmt;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[4]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 44  ;1   ;Column  ;GrandTotalCLE3RemAmt;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[3]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 45  ;1   ;Column  ;GrandTotalCLE2RemAmt;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[2]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 46  ;1   ;Column  ;GrandTotalCLE1RemAmt;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[1]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 47  ;1   ;Column  ;GrandTotalCLEAmtLCY ;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[1]."Amount (LCY)";
               AutoFormatType=1 }

    { 48  ;1   ;Column  ;GrandTotalCLE1CustRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[1]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 49  ;1   ;Column  ;GrandTotalCLE2CustRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[2]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 50  ;1   ;Column  ;GrandTotalCLE3CustRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[3]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 51  ;1   ;Column  ;GrandTotalCLE4CustRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[4]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 52  ;1   ;Column  ;GrandTotalCLE5CustRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[5]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 5   ;1   ;Column  ;NewPagePercustomer  ;
               IncludeCaption=No;
               SourceExpr=NewPagePercustomer }

    { 7   ;1   ;Column  ;PageGroupNo         ;
               IncludeCaption=No;
               SourceExpr=PageGroupNo }

    { 2   ;1   ;Column  ;HeaderText1         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[1] }

    { 3   ;1   ;Column  ;HeaderText2         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[2] }

    { 4   ;1   ;Column  ;HeaderText3         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[3] }

    { 6   ;1   ;Column  ;HeaderText4         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[4] }

    { 8   ;1   ;Column  ;HeaderText5         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[5] }

    { 8503;1   ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Posting Date,Currency Code);
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",EndingDate + 1,DMY2DATE(31,12,9999));
                             END;

               OnAfterGetRecord=VAR
                                  CustLedgEntry@1000 : Record 21;
                                BEGIN
                                  CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
                                  CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
                                  CustLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
                                  IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      InsertTemp(CustLedgEntry);
                                    UNTIL CustLedgEntry.NEXT = 0;
                                  IF "Closed by Entry No." <> 0 THEN BEGIN
                                    CustLedgEntry.SETRANGE("Closed by Entry No.","Closed by Entry No.");
                                    IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                      REPEAT
                                        InsertTemp(CustLedgEntry);
                                      UNTIL CustLedgEntry.NEXT = 0;
                                  END;
                                  CustLedgEntry.RESET;
                                  CustLedgEntry.SETRANGE("Entry No.","Closed by Entry No.");
                                  CustLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
                                  IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      InsertTemp(CustLedgEntry);
                                    UNTIL CustLedgEntry.NEXT = 0;
                                  CurrReport.SKIP;
                                END;

               DataItemLink=Customer No.=FIELD(No.) }

    { 1473;1   ;DataItem;OpenCustLedgEntry   ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Open,Positive,Due Date,Currency Code);
               OnPreDataItem=BEGIN
                               IF AgingBy = AgingBy::"Posting Date" THEN BEGIN
                                 SETRANGE("Posting Date",0D,EndingDate);
                                 SETRANGE("Date Filter",0D,EndingDate);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF AgingBy = AgingBy::"Posting Date" THEN BEGIN
                                    CALCFIELDS("Remaining Amt. (LCY)");
                                    IF "Remaining Amt. (LCY)" = 0 THEN
                                      CurrReport.SKIP;
                                  END;
                                  InsertTemp(OpenCustLedgEntry);
                                  CurrReport.SKIP;
                                END;

               DataItemLink=Customer No.=FIELD(No.) }

    { 6523;1   ;DataItem;CurrencyLoop        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               NumberOfCurrencies := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(TotalCustLedgEntry);
                                  IF Number = 1 THEN BEGIN
                                    IF NOT TempCurrency.FINDSET(FALSE,FALSE) THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF TempCurrency.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  IF TempCurrency.Code <> '' THEN
                                    CurrencyCode := TempCurrency.Code
                                  ELSE
                                    CurrencyCode := GLSetup."LCY Code";
                                  NumberOfCurrencies := NumberOfCurrencies + 1;
                                END;
                                 }

    { 7725;2   ;DataItem;TempCustLedgEntryLoop;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               IF NOT PrintAmountInLCY THEN BEGIN
                                 IF (TempCurrency.Code = '') OR (TempCurrency.Code = GLSetup."LCY Code") THEN
                                   TempCustLedgEntry.SETFILTER("Currency Code",'%1|%2',GLSetup."LCY Code",'')
                                 ELSE
                                   TempCustLedgEntry.SETRANGE("Currency Code",TempCurrency.Code);
                               END;
                               PageGroupNo := NextPageGroupNo;
                               IF NewPagePercustomer AND (NumberOfCurrencies > 0) THEN
                                 NextPageGroupNo := PageGroupNo + 1;
                             END;

               OnAfterGetRecord=VAR
                                  PeriodIndex@1001 : Integer;
                                BEGIN
                                  IF Number = 1 THEN BEGIN
                                    IF NOT TempCustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF TempCustLedgEntry.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  CustLedgEntryEndingDate := TempCustLedgEntry;
                                  DetailedCustomerLedgerEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntryEndingDate."Entry No.");
                                  IF DetailedCustomerLedgerEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      IF (DetailedCustomerLedgerEntry."Entry Type" =
                                          DetailedCustomerLedgerEntry."Entry Type"::"Initial Entry") AND
                                         (CustLedgEntryEndingDate."Posting Date" > EndingDate) AND
                                         (AgingBy <> AgingBy::"Posting Date")
                                      THEN BEGIN
                                        IF CustLedgEntryEndingDate."Document Date" <= EndingDate THEN
                                          DetailedCustomerLedgerEntry."Posting Date" :=
                                            CustLedgEntryEndingDate."Document Date"
                                        ELSE
                                          IF (CustLedgEntryEndingDate."Due Date" <= EndingDate) AND
                                             (AgingBy = AgingBy::"Due Date")
                                          THEN
                                            DetailedCustomerLedgerEntry."Posting Date" :=
                                              CustLedgEntryEndingDate."Due Date"
                                      END;
                                      IF (DetailedCustomerLedgerEntry."Posting Date" <= EndingDate) OR
                                         (TempCustLedgEntry.Open AND
                                          (AgingBy = AgingBy::"Due Date") AND
                                          (CustLedgEntryEndingDate."Due Date" > EndingDate) AND
                                          (CustLedgEntryEndingDate."Posting Date" <= EndingDate))
                                      THEN BEGIN
                                        IF DetailedCustomerLedgerEntry."Entry Type" IN
                                           [DetailedCustomerLedgerEntry."Entry Type"::"Initial Entry",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Unrealized Loss",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Unrealized Gain",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Realized Loss",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Realized Gain",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
                                        THEN BEGIN
                                          CustLedgEntryEndingDate.Amount := CustLedgEntryEndingDate.Amount + DetailedCustomerLedgerEntry.Amount;
                                          CustLedgEntryEndingDate."Amount (LCY)" :=
                                            CustLedgEntryEndingDate."Amount (LCY)" + DetailedCustomerLedgerEntry."Amount (LCY)";
                                        END;
                                        IF DetailedCustomerLedgerEntry."Posting Date" <= EndingDate THEN BEGIN
                                          CustLedgEntryEndingDate."Remaining Amount" :=
                                            CustLedgEntryEndingDate."Remaining Amount" + DetailedCustomerLedgerEntry.Amount;
                                          CustLedgEntryEndingDate."Remaining Amt. (LCY)" :=
                                            CustLedgEntryEndingDate."Remaining Amt. (LCY)" + DetailedCustomerLedgerEntry."Amount (LCY)";
                                        END;
                                      END;
                                    UNTIL DetailedCustomerLedgerEntry.NEXT = 0;
                                  IF CustLedgEntryEndingDate."Remaining Amount" = 0 THEN
                                    CurrReport.SKIP;
                                  CASE AgingBy OF
                                    AgingBy::"Due Date":
                                      PeriodIndex := GetPeriodIndex(CustLedgEntryEndingDate."Due Date");
                                    AgingBy::"Posting Date":
                                      PeriodIndex := GetPeriodIndex(CustLedgEntryEndingDate."Posting Date");
                                    AgingBy::"Document Date":
                                      BEGIN
                                        IF CustLedgEntryEndingDate."Document Date" > EndingDate THEN BEGIN
                                          CustLedgEntryEndingDate."Remaining Amount" := 0;
                                          CustLedgEntryEndingDate."Remaining Amt. (LCY)" := 0;
                                          CustLedgEntryEndingDate."Document Date" := CustLedgEntryEndingDate."Posting Date";
                                        END;
                                        PeriodIndex := GetPeriodIndex(CustLedgEntryEndingDate."Document Date");
                                      END;
                                  END;
                                  CLEAR(AgedCustLedgEntry);
                                  AgedCustLedgEntry[PeriodIndex]."Remaining Amount" := CustLedgEntryEndingDate."Remaining Amount";
                                  AgedCustLedgEntry[PeriodIndex]."Remaining Amt. (LCY)" := CustLedgEntryEndingDate."Remaining Amt. (LCY)";
                                  TotalCustLedgEntry[PeriodIndex]."Remaining Amount" += CustLedgEntryEndingDate."Remaining Amount";
                                  TotalCustLedgEntry[PeriodIndex]."Remaining Amt. (LCY)" += CustLedgEntryEndingDate."Remaining Amt. (LCY)";
                                  GrandTotalCustLedgEntry[PeriodIndex]."Remaining Amt. (LCY)" += CustLedgEntryEndingDate."Remaining Amt. (LCY)";
                                  TotalCustLedgEntry[1].Amount += CustLedgEntryEndingDate."Remaining Amount";
                                  TotalCustLedgEntry[1]."Amount (LCY)" += CustLedgEntryEndingDate."Remaining Amt. (LCY)";
                                  GrandTotalCustLedgEntry[1]."Amount (LCY)" += CustLedgEntryEndingDate."Remaining Amt. (LCY)";
                                END;

               OnPostDataItem=BEGIN
                                IF NOT PrintAmountInLCY THEN
                                  UpdateCurrencyTotals;
                              END;
                               }

    { 58  ;3   ;Column  ;CLEEndDateRemAmtLCY ;
               IncludeCaption=No;
               SourceExpr=CustLedgEntryEndingDate."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 59  ;3   ;Column  ;AgedCLE1RemAmtLCY   ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[1]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 60  ;3   ;Column  ;AgedCLE2RemAmtLCY   ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[2]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 61  ;3   ;Column  ;AgedCLE3RemAmtLCY   ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[3]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 62  ;3   ;Column  ;AgedCLE4RemAmtLCY   ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[4]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 63  ;3   ;Column  ;AgedCLE5RemAmtLCY   ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[5]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 65  ;3   ;Column  ;CLEEndDateAmtLCY    ;
               IncludeCaption=No;
               SourceExpr=CustLedgEntryEndingDate."Amount (LCY)";
               AutoFormatType=1 }

    { 66  ;3   ;Column  ;CLEEndDueDate       ;
               IncludeCaption=No;
               SourceExpr=FORMAT(CustLedgEntryEndingDate."Due Date") }

    { 67  ;3   ;Column  ;CLEEndDateDocNo     ;
               IncludeCaption=No;
               SourceExpr=CustLedgEntryEndingDate."Document No." }

    { 68  ;3   ;Column  ;CLEDocType          ;
               IncludeCaption=No;
               SourceExpr=FORMAT(CustLedgEntryEndingDate."Document Type") }

    { 69  ;3   ;Column  ;CLEPostingDate      ;
               IncludeCaption=No;
               SourceExpr=FORMAT(CustLedgEntryEndingDate."Posting Date") }

    { 89  ;3   ;Column  ;AgedCLE5TempRemAmt  ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[5]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 90  ;3   ;Column  ;AgedCLE4TempRemAmt  ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[4]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 91  ;3   ;Column  ;AgedCLE3TempRemAmt  ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[3]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 92  ;3   ;Column  ;AgedCLE2TempRemAmt  ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[2]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 93  ;3   ;Column  ;AgedCLE1TempRemAmt  ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[1]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 94  ;3   ;Column  ;RemAmt_CLEEndDate   ;
               IncludeCaption=No;
               SourceExpr=CustLedgEntryEndingDate."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 95  ;3   ;Column  ;CLEEndDate          ;
               IncludeCaption=No;
               SourceExpr=CustLedgEntryEndingDate.Amount;
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 83  ;3   ;Column  ;TotalCLE1AmtLCY     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[1]."Amount (LCY)";
               AutoFormatType=1 }

    { 84  ;3   ;Column  ;TotalCLE1RemAmtLCY  ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[1]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 85  ;3   ;Column  ;TotalCLE2RemAmtLCY  ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[2]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 86  ;3   ;Column  ;TotalCLE3RemAmtLCY  ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[3]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 87  ;3   ;Column  ;TotalCLE4RemAmtLCY  ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[4]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 88  ;3   ;Column  ;TotalCLE5RemAmtLCY  ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[5]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 100 ;3   ;Column  ;CurrrencyCode       ;
               IncludeCaption=No;
               SourceExpr=CurrencyCode;
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 102 ;3   ;Column  ;TotalCLE5RemAmt     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[5]."Remaining Amount";
               AutoFormatType=1 }

    { 103 ;3   ;Column  ;TotalCLE4RemAmt     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[4]."Remaining Amount";
               AutoFormatType=1 }

    { 104 ;3   ;Column  ;TotalCLE3RemAmt     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[3]."Remaining Amount";
               AutoFormatType=1 }

    { 105 ;3   ;Column  ;TotalCLE2RemAmt     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[2]."Remaining Amount";
               AutoFormatType=1 }

    { 106 ;3   ;Column  ;TotalCLE1RemAmt     ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[1]."Remaining Amount";
               AutoFormatType=1 }

    { 107 ;3   ;Column  ;TotalCLE1Amt        ;
               IncludeCaption=No;
               SourceExpr=TotalCustLedgEntry[1].Amount;
               AutoFormatType=1 }

    { 1010;3   ;Column  ;TotalCheck          ;
               IncludeCaption=No;
               SourceExpr=CustFilterCheck }

    { 1011;3   ;Column  ;GrandTotalCLE1AmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[1]."Amount (LCY)";
               AutoFormatType=1 }

    { 1021;3   ;Column  ;GrandTotalCLE5PctRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[5]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 1019;3   ;Column  ;GrandTotalCLE3PctRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[3]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 1018;3   ;Column  ;GrandTotalCLE2PctRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[2]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 1017;3   ;Column  ;GrandTotalCLE1PctRemAmtLCY;
               IncludeCaption=No;
               SourceExpr=Pct(GrandTotalCustLedgEntry[1]."Remaining Amt. (LCY)",GrandTotalCustLedgEntry[1]."Amount (LCY)") }

    { 1016;3   ;Column  ;GrandTotalCLE5RemAmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[5]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 1015;3   ;Column  ;GrandTotalCLE4RemAmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[4]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 1014;3   ;Column  ;GrandTotalCLE3RemAmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[3]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 1013;3   ;Column  ;GrandTotalCLE2RemAmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[2]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 1012;3   ;Column  ;GrandTotalCLE1RemAmtLCY;
               IncludeCaption=No;
               SourceExpr=GrandTotalCustLedgEntry[1]."Remaining Amt. (LCY)";
               AutoFormatType=1 }

    { 8052;    ;DataItem;CurrencyTotals      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    IF NOT TempCurrency2.FINDSET(FALSE,FALSE) THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF TempCurrency2.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  CLEAR(AgedCustLedgEntry);
                                  TempCurrencyAmount.SETRANGE("Currency Code",TempCurrency2.Code);
                                  IF TempCurrencyAmount.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      IF TempCurrencyAmount.Date <> DMY2DATE(31,12,9999) THEN
                                        AgedCustLedgEntry[GetPeriodIndex(TempCurrencyAmount.Date)]."Remaining Amount" :=
                                          TempCurrencyAmount.Amount
                                      ELSE
                                        AgedCustLedgEntry[6]."Remaining Amount" := TempCurrencyAmount.Amount;
                                    UNTIL TempCurrencyAmount.NEXT = 0;
                                END;
                                 }

    { 132 ;1   ;Column  ;CurrNo              ;
               IncludeCaption=No;
               SourceExpr=Number = 1 }

    { 117 ;1   ;Column  ;TempCurrCode        ;
               IncludeCaption=No;
               SourceExpr=TempCurrency2.Code;
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 119 ;1   ;Column  ;AgedCLE6RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[6]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 120 ;1   ;Column  ;AgedCLE1RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[1]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 121 ;1   ;Column  ;AgedCLE2RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[2]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 122 ;1   ;Column  ;AgedCLE3RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[3]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 123 ;1   ;Column  ;AgedCLE4RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[4]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

    { 124 ;1   ;Column  ;AgedCLE5RemAmt      ;
               IncludeCaption=No;
               SourceExpr=AgedCustLedgEntry[5]."Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr=CurrencyCode }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EndingDate = 0D THEN
                     EndingDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 4   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 2   ;1   ;Group     ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=AgedAsOf;
                  CaptionML=ENU=Aged As Of;
                  ToolTipML=ENU=Specifies the date that you want the aging calculated for.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndingDate }

      { 3   ;2   ;Field     ;
                  Name=Agingby;
                  CaptionML=ENU=Aging by;
                  ToolTipML=ENU=Specifies if the aging will be calculated from the due date, the posting date, or the document date.;
                  OptionCaptionML=ENU=Due Date,Posting Date,Document Date;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AgingBy }

      { 7   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the length of each period, for example, enter "1M" for one month.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PeriodLength }

      { 9   ;2   ;Field     ;
                  Name=AmountsinLCY;
                  CaptionML=ENU=Print Amounts in LCY;
                  ToolTipML=ENU=Specifies if you want the report to specify the aging per customer ledger entry.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PrintAmountInLCY }

      { 11  ;2   ;Field     ;
                  Name=PrintDetails;
                  CaptionML=ENU=Print Details;
                  ToolTipML=ENU=Specifies if you want the report to show the detailed entries that add up the total balance for each customer.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PrintDetails }

      { 15  ;2   ;Field     ;
                  Name=HeadingType;
                  CaptionML=ENU=Heading Type;
                  ToolTipML=ENU=Specifies if the column heading for the three periods will indicate a date interval or the number of days overdue.;
                  OptionCaptionML=ENU=Date Interval,Number of Days;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=HeadingType }

      { 13  ;2   ;Field     ;
                  Name=perCustomer;
                  CaptionML=ENU=New Page per Customer;
                  ToolTipML=ENU=Specifies if each customer's information is printed on a new page if you have chosen two or more customers to be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NewPagePercustomer }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 74  ;BalanceCaption      ;CaptionML=ENU=Balance }
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      GLSetup@1011 : Record 98;
      TempCustLedgEntry@1009 : TEMPORARY Record 21;
      CustLedgEntryEndingDate@1013 : Record 21;
      TotalCustLedgEntry@1014 : ARRAY [5] OF Record 21;
      GrandTotalCustLedgEntry@1018 : ARRAY [5] OF Record 21;
      AgedCustLedgEntry@1022 : ARRAY [6] OF Record 21;
      TempCurrency@1010 : TEMPORARY Record 4;
      TempCurrency2@1030 : TEMPORARY Record 4;
      TempCurrencyAmount@1029 : TEMPORARY Record 264;
      DetailedCustomerLedgerEntry@1102601000 : Record 379;
      CustFilter@1000 : Text;
      PrintAmountInLCY@1012 : Boolean;
      EndingDate@1001 : Date;
      AgingBy@1002 : 'Due Date,Posting Date,Document Date';
      PeriodLength@1003 : DateFormula;
      PrintDetails@1015 : Boolean;
      HeadingType@1019 : 'Date Interval,Number of Days';
      NewPagePercustomer@1027 : Boolean;
      PeriodStartDate@1004 : ARRAY [5] OF Date;
      PeriodEndDate@1005 : ARRAY [5] OF Date;
      HeaderText@1006 : ARRAY [5] OF Text[30];
      Text000@1007 : TextConst 'ENU=Not Due';
      Text001@1008 : TextConst 'ENU=Before';
      CurrencyCode@1016 : Code[10];
      Text002@1020 : TextConst 'ENU=days';
      Text003@1021 : TextConst 'ENU=More than';
      Text004@1017 : TextConst 'ENU=Aged by %1';
      Text005@1023 : TextConst 'ENU=Total for %1';
      Text006@1024 : TextConst 'ENU=Aged as of %1';
      Text007@1025 : TextConst 'ENU=Aged by %1';
      NumberOfCurrencies@1028 : Integer;
      Text009@1031 : TextConst 'ENU=Due Date,Posting Date,Document Date';
      Text010@1032 : TextConst 'ENU=The Date Formula %1 cannot be used. Try to restate it. E.g. 1M+CM instead of CM+1M.';
      PageGroupNo@1035 : Integer;
      NextPageGroupNo@1036 : Integer;
      CustFilterCheck@1037 : Boolean;
      Text032@1059 : TextConst '@@@=Negating the period length: %1 is the period length;ENU=-%1';
      AgedAccReceivableCptnLbl@5173 : TextConst 'ENU=Aged Accounts Receivable';
      CurrReportPageNoCptnLbl@6074 : TextConst 'ENU=Page';
      AllAmtinLCYCptnLbl@8265 : TextConst 'ENU=All Amounts in LCY';
      AgedOverdueAmtCptnLbl@2837 : TextConst 'ENU=Aged Overdue Amounts';
      CLEEndDateAmtLCYCptnLbl@3633 : TextConst 'ENU="Original Amount "';
      CLEEndDateDueDateCptnLbl@1514 : TextConst 'ENU=Due Date';
      CLEEndDateDocNoCptnLbl@1511 : TextConst 'ENU=Document No.';
      CLEEndDatePstngDateCptnLbl@4115 : TextConst 'ENU=Posting Date';
      CLEEndDateDocTypeCptnLbl@7645 : TextConst 'ENU=Document Type';
      OriginalAmtCptnLbl@4991 : TextConst 'ENU=Currency Code';
      TotalLCYCptnLbl@4055 : TextConst 'ENU=Total (LCY)';
      CurrSpecificationCptnLbl@3382 : TextConst 'ENU=Currency Specification';
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1259, Version=2.0.0.1259, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1259, Version=2.0.0.1259, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE CalcDates@5();
    VAR
      i@1000 : Integer;
      PeriodLength2@1001 : DateFormula;
    BEGIN
      EVALUATE(PeriodLength2,STRSUBSTNO(Text032,PeriodLength));
      IF AgingBy = AgingBy::"Due Date" THEN BEGIN
        PeriodEndDate[1] := DMY2DATE(31,12,9999);
        PeriodStartDate[1] := EndingDate + 1;
      END ELSE BEGIN
        PeriodEndDate[1] := EndingDate;
        PeriodStartDate[1] := CALCDATE(PeriodLength2,EndingDate + 1);
      END;
      FOR i := 2 TO ARRAYLEN(PeriodEndDate) DO BEGIN
        PeriodEndDate[i] := PeriodStartDate[i - 1] - 1;
        PeriodStartDate[i] := CALCDATE(PeriodLength2,PeriodEndDate[i] + 1);
      END;
      PeriodStartDate[i] := 0D;
      FOR i := 1 TO ARRAYLEN(PeriodEndDate) DO
        IF PeriodEndDate[i] < PeriodStartDate[i] THEN
          ERROR(Text010,PeriodLength);
    END;

    LOCAL PROCEDURE CreateHeadings@10();
    VAR
      i@1000 : Integer;
    BEGIN
      IF AgingBy = AgingBy::"Due Date" THEN BEGIN
        HeaderText[1] := Text000;
        i := 2;
      END ELSE
        i := 1;
      WHILE i < ARRAYLEN(PeriodEndDate) DO BEGIN
        IF HeadingType = HeadingType::"Date Interval" THEN
          HeaderText[i] := STRSUBSTNO('%1\..%2',PeriodStartDate[i],PeriodEndDate[i])
        ELSE
          HeaderText[i] :=
            STRSUBSTNO('%1 - %2 %3',EndingDate - PeriodEndDate[i] + 1,EndingDate - PeriodStartDate[i] + 1,Text002);
        i := i + 1;
      END;
      IF HeadingType = HeadingType::"Date Interval" THEN
        HeaderText[i] := STRSUBSTNO('%1 \%2',Text001,PeriodStartDate[i - 1])
      ELSE
        HeaderText[i] := STRSUBSTNO('%1 \%2 %3',Text003,EndingDate - PeriodStartDate[i - 1] + 1,Text002);
    END;

    LOCAL PROCEDURE InsertTemp@1(VAR CustLedgEntry@1040000 : Record 21);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      WITH TempCustLedgEntry DO BEGIN
        IF GET(CustLedgEntry."Entry No.") THEN
          EXIT;
        TempCustLedgEntry := CustLedgEntry;
        INSERT;
        IF PrintAmountInLCY THEN BEGIN
          CLEAR(TempCurrency);
          TempCurrency."Amount Rounding Precision" := GLSetup."Amount Rounding Precision";
          IF TempCurrency.INSERT THEN;
          EXIT;
        END;
        IF TempCurrency.GET("Currency Code") THEN
          EXIT;
        IF TempCurrency.GET('') AND ("Currency Code" = GLSetup."LCY Code") THEN
          EXIT;
        IF TempCurrency.GET(GLSetup."LCY Code") AND ("Currency Code" = '') THEN
          EXIT;
        IF "Currency Code" <> '' THEN
          Currency.GET("Currency Code")
        ELSE BEGIN
          CLEAR(Currency);
          Currency."Amount Rounding Precision" := GLSetup."Amount Rounding Precision";
        END;
        TempCurrency := Currency;
        TempCurrency.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetPeriodIndex@8(Date@1040000 : Date) : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PeriodEndDate) DO
        IF Date IN [PeriodStartDate[i]..PeriodEndDate[i]] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE Pct@2(a@1000 : Decimal;b@1001 : Decimal) : Text[30];
    BEGIN
      IF b <> 0 THEN
        EXIT(FORMAT(ROUND(100 * a / b,0.1),0,'<Sign><Integer><Decimals,2>') + '%');
    END;

    LOCAL PROCEDURE UpdateCurrencyTotals@7();
    VAR
      i@1000 : Integer;
    BEGIN
      TempCurrency2.Code := CurrencyCode;
      IF TempCurrency2.INSERT THEN;
      WITH TempCurrencyAmount DO BEGIN
        FOR i := 1 TO ARRAYLEN(TotalCustLedgEntry) DO BEGIN
          "Currency Code" := CurrencyCode;
          Date := PeriodStartDate[i];
          IF FIND THEN BEGIN
            Amount := Amount + TotalCustLedgEntry[i]."Remaining Amount";
            MODIFY;
          END ELSE BEGIN
            "Currency Code" := CurrencyCode;
            Date := PeriodStartDate[i];
            Amount := TotalCustLedgEntry[i]."Remaining Amount";
            INSERT;
          END;
        END;
        "Currency Code" := CurrencyCode;
        Date := DMY2DATE(31,12,9999);
        IF FIND THEN BEGIN
          Amount := Amount + TotalCustLedgEntry[1].Amount;
          MODIFY;
        END ELSE BEGIN
          "Currency Code" := CurrencyCode;
          Date := DMY2DATE(31,12,9999);
          Amount := TotalCustLedgEntry[1].Amount;
          INSERT;
        END;
      END;
    END;

    PROCEDURE InitializeRequest@11(NewEndingDate@1000 : Date;NewAgingBy@1001 : Option;NewPeriodLength@1002 : DateFormula;NewPrintAmountInLCY@1003 : Boolean;NewPrintDetails@1004 : Boolean;NewHeadingType@1005 : Option;NewPagePercust@1006 : Boolean);
    BEGIN
      EndingDate := NewEndingDate;
      AgingBy := NewAgingBy;
      PeriodLength := NewPeriodLength;
      PrintAmountInLCY := NewPrintAmountInLCY;
      PrintDetails := NewPrintDetails;
      HeadingType := NewHeadingType;
      NewPagePercustomer := NewPagePercust;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description></Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>e45d222d-81d0-443c-aa00-62a784c684aa</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>49fd9418-41fc-42a6-b940-e1e3562c82a7</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

