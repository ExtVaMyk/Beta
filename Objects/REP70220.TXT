OBJECT Report 70220 ForNAV Aged Accounts Receivbl.
{
  OBJECT-PROPERTIES
  {
    Date=08/03/17;
    Time=12:34:22 PM;
    Modified=Yes;
    Version List=VAM1,FORNAV2.0.0.1260/1260;
  }
  PROPERTIES
  {
    CaptionML=ENU=Aged Accounts Receivable;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  GLSetup.GET;
                  CalcDates;
                  CreateHeadings;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 5   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1 }

    { 6836;1   ;DataItem;Customer            ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  TempCurrency.RESET;
                                  TempCurrency.DELETEALL;
                                  TempCustLedgEntry.RESET;
                                  TempCustLedgEntry.DELETEALL;
                                END;

               ReqFilterFields=No. }

    { 108 ;2   ;Column  ;FormatEndingDate    ;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO(Text006,FORMAT(EndingDate,0,4)) }

    { 110 ;2   ;Column  ;PostingDate         ;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO(Text007,SELECTSTR(AgingBy + 1,Text009)) }

    { 128 ;2   ;Column  ;PrintAmountInLCY    ;
               IncludeCaption=No;
               SourceExpr=PrintAmountInLCY }

    { 130 ;2   ;Column  ;AgingByDueDate      ;
               IncludeCaption=No;
               SourceExpr=AgingBy = AgingBy::"Due Date" }

    { 1   ;2   ;Column  ;AgedOverdueAmtCptn  ;
               IncludeCaption=No;
               SourceExpr=AgedOverdueAmtCptnLbl }

    { 131 ;2   ;Column  ;PrintDetails        ;
               IncludeCaption=No;
               SourceExpr=PrintDetails }

    { 2   ;2   ;Column  ;HeaderText1         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[1] }

    { 3   ;2   ;Column  ;HeaderText2         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[2] }

    { 4   ;2   ;Column  ;HeaderText3         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[3] }

    { 6   ;2   ;Column  ;HeaderText4         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[4] }

    { 8   ;2   ;Column  ;HeaderText5         ;
               IncludeCaption=No;
               SourceExpr=HeaderText[5] }

    { 8503;2   ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Posting Date,Currency Code);
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",EndingDate + 1,DMY2DATE(31,12,9999));
                             END;

               OnAfterGetRecord=VAR
                                  CustLedgEntry@1000 : Record 21;
                                BEGIN
                                  CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
                                  CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
                                  CustLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
                                  IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      InsertTemp(CustLedgEntry);
                                    UNTIL CustLedgEntry.NEXT = 0;
                                  IF "Closed by Entry No." <> 0 THEN BEGIN
                                    CustLedgEntry.SETRANGE("Closed by Entry No.","Closed by Entry No.");
                                    IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                      REPEAT
                                        InsertTemp(CustLedgEntry);
                                      UNTIL CustLedgEntry.NEXT = 0;
                                  END;
                                  CustLedgEntry.RESET;
                                  CustLedgEntry.SETRANGE("Entry No.","Closed by Entry No.");
                                  CustLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
                                  IF CustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      InsertTemp(CustLedgEntry);
                                    UNTIL CustLedgEntry.NEXT = 0;
                                  CurrReport.SKIP;
                                END;

               DataItemLink=Customer No.=FIELD(No.) }

    { 1473;2   ;DataItem;OpenCustLedgEntry   ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Open,Positive,Due Date,Currency Code);
               OnPreDataItem=BEGIN
                               IF AgingBy = AgingBy::"Posting Date" THEN BEGIN
                                 SETRANGE("Posting Date",0D,EndingDate);
                                 SETRANGE("Date Filter",0D,EndingDate);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF AgingBy = AgingBy::"Posting Date" THEN BEGIN
                                    CALCFIELDS("Remaining Amt. (LCY)");
                                    IF "Remaining Amt. (LCY)" = 0 THEN
                                      CurrReport.SKIP;
                                  END;
                                  InsertTemp(OpenCustLedgEntry);
                                  CurrReport.SKIP;
                                END;

               DataItemLink=Customer No.=FIELD(No.) }

    { 6523;2   ;DataItem;CurrencyLoop        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               NumberOfCurrencies := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  LCYCurrency := FALSE;
                                  IF Number = 1 THEN BEGIN
                                    IF NOT TempCurrency.FINDSET(FALSE,FALSE) THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF TempCurrency.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  IF TempCurrency.Code <> '' THEN
                                    CurrencyCode := TempCurrency.Code
                                  ELSE BEGIN
                                    CurrencyCode := GLSetup."LCY Code";
                                    LCYCurrency := TRUE;
                                  END;
                                  NumberOfCurrencies := NumberOfCurrencies + 1;
                                END;
                                 }

    { 7725;3   ;DataItem;TempCustLedgEntryLoop;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               IF NOT PrintAmountInLCY THEN BEGIN
                                 IF (CurrencyCode = '') OR (CurrencyCode = GLSetup."LCY Code") THEN
                                   TempCustLedgEntry.SETFILTER("Currency Code",'%1|%2',CurrencyCode,'')
                                 ELSE
                                   TempCustLedgEntry.SETRANGE("Currency Code",CurrencyCode);
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  PeriodIndex@1001 : Integer;
                                BEGIN
                                  IF Number = 1 THEN BEGIN
                                    IF NOT TempCustLedgEntry.FINDSET(FALSE,FALSE) THEN
                                      CurrReport.BREAK;
                                  END ELSE
                                    IF TempCustLedgEntry.NEXT = 0 THEN
                                      CurrReport.BREAK;

                                  AccountsReceivblBuffer.INIT;
                                  AccountsReceivblBuffer."Entry No." := TempCustLedgEntry."Entry No.";
                                  AccountsReceivblBuffer.Type := AccountsReceivblBuffer.Type::CustomerEntry;
                                  AccountsReceivblBuffer."Customer No." := TempCustLedgEntry."Customer No.";
                                  AccountsReceivblBuffer."Currency Code" := CurrencyCode;
                                  AccountsReceivblBuffer."Customer to Currency Groupping" := TempCustLedgEntry."Customer No." + ' ' + CurrencyCode;
                                  AccountsReceivblBuffer."Document No." := TempCustLedgEntry."Document No.";
                                  AccountsReceivblBuffer."Document Type" := TempCustLedgEntry."Document Type";
                                  AccountsReceivblBuffer."Document Date" := TempCustLedgEntry."Document Date";
                                  AccountsReceivblBuffer."Posting Date" := TempCustLedgEntry."Posting Date";
                                  AccountsReceivblBuffer."Due Date" := TempCustLedgEntry."Due Date";
                                  AccountsReceivblBuffer."New Page" := NewPagePercustomer;
                                  DetailedCustomerLedgerEntry.SETRANGE("Cust. Ledger Entry No.",TempCustLedgEntry."Entry No.");
                                  IF DetailedCustomerLedgerEntry.FINDSET(FALSE,FALSE) THEN
                                    REPEAT
                                      IF (DetailedCustomerLedgerEntry."Entry Type" =
                                          DetailedCustomerLedgerEntry."Entry Type"::"Initial Entry") AND
                                         (TempCustLedgEntry."Posting Date" > EndingDate) AND
                                         (AgingBy <> AgingBy::"Posting Date")
                                      THEN BEGIN
                                        IF TempCustLedgEntry."Document Date" <= EndingDate THEN
                                          DetailedCustomerLedgerEntry."Posting Date" :=
                                            TempCustLedgEntry."Document Date"
                                        ELSE
                                          IF (TempCustLedgEntry."Due Date" <= EndingDate) AND
                                             (AgingBy = AgingBy::"Due Date")
                                          THEN
                                            DetailedCustomerLedgerEntry."Posting Date" :=
                                              TempCustLedgEntry."Due Date";
                                      END;
                                      IF (DetailedCustomerLedgerEntry."Posting Date" <= EndingDate) OR
                                         (TempCustLedgEntry.Open AND
                                          (AgingBy = AgingBy::"Due Date") AND
                                          (TempCustLedgEntry."Due Date" > EndingDate) AND
                                          (TempCustLedgEntry."Posting Date" <= EndingDate))
                                      THEN BEGIN
                                        IF DetailedCustomerLedgerEntry."Entry Type" IN
                                           [DetailedCustomerLedgerEntry."Entry Type"::"Initial Entry",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Unrealized Loss",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Unrealized Gain",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Realized Loss",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Realized Gain",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                                            DetailedCustomerLedgerEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
                                        THEN BEGIN
                                          IF PrintAmountInLCY THEN
                                            AccountsReceivblBuffer.Amount += DetailedCustomerLedgerEntry."Amount (LCY)"
                                          ELSE
                                            AccountsReceivblBuffer.Amount += DetailedCustomerLedgerEntry.Amount;
                                          AccountsReceivblBuffer."Amount (LCY)" += DetailedCustomerLedgerEntry."Amount (LCY)";
                                        END;
                                        IF DetailedCustomerLedgerEntry."Posting Date" <= EndingDate THEN BEGIN
                                          IF PrintAmountInLCY THEN
                                            AccountsReceivblBuffer.Balance += DetailedCustomerLedgerEntry."Amount (LCY)"
                                          ELSE
                                            AccountsReceivblBuffer.Balance += DetailedCustomerLedgerEntry.Amount;
                                          AccountsReceivblBuffer."Balance (LCY)" += DetailedCustomerLedgerEntry."Amount (LCY)";
                                        END;
                                      END;
                                    UNTIL DetailedCustomerLedgerEntry.NEXT = 0;

                                  IF AccountsReceivblBuffer.Balance = 0 THEN
                                    CurrReport.SKIP;
                                  CASE AgingBy OF
                                    AgingBy::"Due Date":
                                      PeriodIndex := GetPeriodIndex(AccountsReceivblBuffer."Due Date");
                                    AgingBy::"Posting Date":
                                      PeriodIndex := GetPeriodIndex(AccountsReceivblBuffer."Posting Date");
                                    AgingBy::"Document Date":
                                      BEGIN
                                        IF AccountsReceivblBuffer."Document Date" > EndingDate THEN BEGIN
                                          AccountsReceivblBuffer.Balance := 0;
                                          AccountsReceivblBuffer."Balance (LCY)" := 0;
                                          AccountsReceivblBuffer."Document Date" := AccountsReceivblBuffer."Posting Date";
                                        END;
                                        PeriodIndex := GetPeriodIndex(AccountsReceivblBuffer."Document Date");
                                      END;
                                  END;

                                  CASE PeriodIndex OF
                                    1: BEGIN
                                        AccountsReceivblBuffer."Amount - Interval 1" := AccountsReceivblBuffer.Balance;
                                        AccountsReceivblBuffer."Amount - Interval 1 (LCY)" := AccountsReceivblBuffer."Balance (LCY)";
                                       END;
                                    2: BEGIN
                                          AccountsReceivblBuffer."Amount - Interval 2" := AccountsReceivblBuffer.Balance;
                                          AccountsReceivblBuffer."Amount - Interval 2 (LCY)" := AccountsReceivblBuffer."Balance (LCY)";
                                         END;
                                    3: BEGIN
                                          AccountsReceivblBuffer."Amount - Interval 3" := AccountsReceivblBuffer.Balance;
                                          AccountsReceivblBuffer."Amount - Interval 3 (LCY)" := AccountsReceivblBuffer."Balance (LCY)";
                                         END;
                                    4: BEGIN
                                          AccountsReceivblBuffer."Amount - Interval 4" := AccountsReceivblBuffer.Balance;
                                          AccountsReceivblBuffer."Amount - Interval 4 (LCY)" := AccountsReceivblBuffer."Balance (LCY)";
                                         END;
                                    5: BEGIN
                                          AccountsReceivblBuffer."Amount - Interval 5" := AccountsReceivblBuffer.Balance;
                                          AccountsReceivblBuffer."Amount - Interval 5 (LCY)" := AccountsReceivblBuffer."Balance (LCY)";
                                         END;
                                  END;
                                  AccountsReceivblBuffer.INSERT;

                                  IF NOT PrintAmountInLCY THEN
                                    UpdateCurrencyTotals(AccountsReceivblBuffer);
                                END;
                                 }

    { 70220;1  ;DataItem;AccountsReceivblBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Customer to Currency Groupping);
               Temporary=Yes }

    { 1000000000;1;DataItem;CurrencyTotalsBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Entry No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EndingDate = 0D THEN
                     EndingDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 4   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 2   ;1   ;Group     ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=AgedAsOf;
                  CaptionML=ENU=Aged As Of;
                  ToolTipML=ENU=Specifies the date that you want the aging calculated for.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndingDate }

      { 3   ;2   ;Field     ;
                  Name=Agingby;
                  CaptionML=ENU=Aging by;
                  ToolTipML=ENU=Specifies if the aging will be calculated from the due date, the posting date, or the document date.;
                  OptionCaptionML=ENU=Due Date,Posting Date,Document Date;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AgingBy }

      { 7   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the length of each period, for example, enter "1M" for one month.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PeriodLength }

      { 9   ;2   ;Field     ;
                  Name=AmountsinLCY;
                  CaptionML=ENU=Print Amounts in LCY;
                  ToolTipML=ENU=Specifies if you want the report to specify the aging per customer ledger entry.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PrintAmountInLCY }

      { 11  ;2   ;Field     ;
                  Name=PrintDetails;
                  CaptionML=ENU=Print Details;
                  ToolTipML=ENU=Specifies if you want the report to show the detailed entries that add up the total balance for each customer.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PrintDetails }

      { 15  ;2   ;Field     ;
                  Name=HeadingType;
                  CaptionML=ENU=Heading Type;
                  ToolTipML=ENU=Specifies if the column heading for the three periods will indicate a date interval or the number of days overdue.;
                  OptionCaptionML=ENU=Date Interval,Number of Days;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=HeadingType }

      { 13  ;2   ;Field     ;
                  Name=perCustomer;
                  CaptionML=ENU=New Page per Customer;
                  ToolTipML=ENU=Specifies if each customer's information is printed on a new page if you have chosen two or more customers to be included in the report.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NewPagePercustomer }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 74  ;BalanceCaption      ;CaptionML=ENU=Balance }
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      GLSetup@1011 : Record 98;
      TempCustLedgEntry@1009 : TEMPORARY Record 21;
      AgedCustLedgEntry@1022 : ARRAY [6] OF Record 21;
      TempCurrency@1010 : TEMPORARY Record 4;
      DetailedCustomerLedgerEntry@1102601000 : Record 379;
      PrintAmountInLCY@1012 : Boolean;
      EndingDate@1001 : Date;
      AgingBy@1002 : 'Due Date,Posting Date,Document Date';
      PeriodLength@1003 : DateFormula;
      PrintDetails@1015 : Boolean;
      HeadingType@1019 : 'Date Interval,Number of Days';
      NewPagePercustomer@1027 : Boolean;
      PeriodStartDate@1004 : ARRAY [5] OF Date;
      PeriodEndDate@1005 : ARRAY [5] OF Date;
      HeaderText@1006 : ARRAY [5] OF Text[30];
      Text000@1007 : TextConst 'ENU=Not Due';
      Text001@1008 : TextConst 'ENU=Before';
      CurrencyCode@1016 : Code[10];
      Text002@1020 : TextConst 'ENU=days';
      Text003@1021 : TextConst 'ENU=More than';
      Text004@1017 : TextConst 'ENU=Aged by %1';
      Text005@1023 : TextConst 'ENU=Total for %1';
      Text006@1024 : TextConst 'ENU=Aged as of %1';
      Text007@1025 : TextConst 'ENU=Aged by %1';
      NumberOfCurrencies@1028 : Integer;
      Text009@1031 : TextConst 'ENU=Due Date,Posting Date,Document Date';
      Text010@1032 : TextConst 'ENU=The Date Formula %1 cannot be used. Try to restate it. E.g. 1M+CM instead of CM+1M.';
      LCYCurrency@1000000000 : Boolean;
      Text032@1059 : TextConst '@@@=Negating the period length: %1 is the period length;ENU=-%1';
      AgedOverdueAmtCptnLbl@2837 : TextConst 'ENU=Aged Overdue Amounts';
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1260, Version=2.0.0.1260, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE CalcDates@5();
    VAR
      i@1000 : Integer;
      PeriodLength2@1001 : DateFormula;
    BEGIN
      EVALUATE(PeriodLength2,STRSUBSTNO(Text032,PeriodLength));
      IF AgingBy = AgingBy::"Due Date" THEN BEGIN
        PeriodEndDate[1] := DMY2DATE(31,12,9999);
        PeriodStartDate[1] := EndingDate + 1;
      END ELSE BEGIN
        PeriodEndDate[1] := EndingDate;
        PeriodStartDate[1] := CALCDATE(PeriodLength2,EndingDate + 1);
      END;
      FOR i := 2 TO ARRAYLEN(PeriodEndDate) DO BEGIN
        PeriodEndDate[i] := PeriodStartDate[i - 1] - 1;
        PeriodStartDate[i] := CALCDATE(PeriodLength2,PeriodEndDate[i] + 1);
      END;
      PeriodStartDate[i] := 0D;
      FOR i := 1 TO ARRAYLEN(PeriodEndDate) DO
        IF PeriodEndDate[i] < PeriodStartDate[i] THEN
          ERROR(Text010,PeriodLength);
    END;

    LOCAL PROCEDURE CreateHeadings@10();
    VAR
      i@1000 : Integer;
    BEGIN
      IF AgingBy = AgingBy::"Due Date" THEN BEGIN
        HeaderText[1] := Text000;
        i := 2;
      END ELSE
        i := 1;
      WHILE i < ARRAYLEN(PeriodEndDate) DO BEGIN
        IF HeadingType = HeadingType::"Date Interval" THEN
          HeaderText[i] := STRSUBSTNO('%1\..%2',PeriodStartDate[i],PeriodEndDate[i])
        ELSE
          HeaderText[i] :=
            STRSUBSTNO('%1 - %2 %3',EndingDate - PeriodEndDate[i] + 1,EndingDate - PeriodStartDate[i] + 1,Text002);
        i := i + 1;
      END;
      IF HeadingType = HeadingType::"Date Interval" THEN
        HeaderText[i] := STRSUBSTNO('%1 \%2',Text001,PeriodStartDate[i - 1])
      ELSE
        HeaderText[i] := STRSUBSTNO('%1 \%2 %3',Text003,EndingDate - PeriodStartDate[i - 1] + 1,Text002);
    END;

    LOCAL PROCEDURE InsertTemp@1(VAR CustLedgEntry@1040000 : Record 21);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      WITH TempCustLedgEntry DO BEGIN
        IF GET(CustLedgEntry."Entry No.") THEN
          EXIT;
        TempCustLedgEntry := CustLedgEntry;
        INSERT;
        IF PrintAmountInLCY THEN BEGIN
          CLEAR(TempCurrency);
          IF TempCurrency.INSERT THEN;
          EXIT;
        END;
        IF TempCurrency.GET("Currency Code") THEN
          EXIT;
        IF TempCurrency.GET('') AND ("Currency Code" = GLSetup."LCY Code") THEN
          EXIT;
        IF TempCurrency.GET(GLSetup."LCY Code") AND ("Currency Code" = '') THEN
          EXIT;
        IF "Currency Code" <> '' THEN
          Currency.GET("Currency Code")
        ELSE BEGIN
          CLEAR(Currency);
        END;
        TempCurrency := Currency;
        TempCurrency.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetPeriodIndex@8(Date@1040000 : Date) : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(PeriodEndDate) DO
        IF Date IN [PeriodStartDate[i]..PeriodEndDate[i]] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE UpdateCurrencyTotals@7(VAR ForNAVAccountsReceivbBufferParam@1000000000 : TEMPORARY Record 70220);
    VAR
      i@1000 : Integer;
    BEGIN
      CurrencyTotalsBuffer.RESET;
      CurrencyTotalsBuffer.SETRANGE("Currency Code", ForNAVAccountsReceivbBufferParam."Currency Code");
      IF NOT CurrencyTotalsBuffer.FINDFIRST THEN BEGIN
        IF LCYCurrency THEN
          CurrencyTotalsBuffer."Entry No." := 0
        ELSE
          CurrencyTotalsBuffer."Entry No." := CalcCurrencyEntryNo(ForNAVAccountsReceivbBufferParam."Currency Code");
        CurrencyTotalsBuffer.Type := CurrencyTotalsBuffer.Type::CurrencyTotals;
        CurrencyTotalsBuffer."Currency Code" := ForNAVAccountsReceivbBufferParam."Currency Code";
        CurrencyTotalsBuffer.Amount := ForNAVAccountsReceivbBufferParam.Amount;
        CurrencyTotalsBuffer.Balance := ForNAVAccountsReceivbBufferParam.Balance;
        CurrencyTotalsBuffer."Amount - Interval 1" := ForNAVAccountsReceivbBufferParam."Amount - Interval 1";
        CurrencyTotalsBuffer."Amount - Interval 2" := ForNAVAccountsReceivbBufferParam."Amount - Interval 2";
        CurrencyTotalsBuffer."Amount - Interval 3" := ForNAVAccountsReceivbBufferParam."Amount - Interval 3";
        CurrencyTotalsBuffer."Amount - Interval 4" := ForNAVAccountsReceivbBufferParam."Amount - Interval 4";
        CurrencyTotalsBuffer."Amount - Interval 5" := ForNAVAccountsReceivbBufferParam."Amount - Interval 5";
        CurrencyTotalsBuffer.INSERT;
      END ELSE BEGIN
        CurrencyTotalsBuffer.Amount += ForNAVAccountsReceivbBufferParam.Amount;
        CurrencyTotalsBuffer.Balance += ForNAVAccountsReceivbBufferParam.Balance;
        CurrencyTotalsBuffer."Amount - Interval 1" += ForNAVAccountsReceivbBufferParam."Amount - Interval 1";
        CurrencyTotalsBuffer."Amount - Interval 2" += ForNAVAccountsReceivbBufferParam."Amount - Interval 2";
        CurrencyTotalsBuffer."Amount - Interval 3" += ForNAVAccountsReceivbBufferParam."Amount - Interval 3";
        CurrencyTotalsBuffer."Amount - Interval 4" += ForNAVAccountsReceivbBufferParam."Amount - Interval 4";
        CurrencyTotalsBuffer."Amount - Interval 5" += ForNAVAccountsReceivbBufferParam."Amount - Interval 5";
        CurrencyTotalsBuffer.MODIFY;
      END;
    END;

    PROCEDURE InitializeRequest@11(NewEndingDate@1000 : Date;NewAgingBy@1001 : Option;NewPeriodLength@1002 : DateFormula;NewPrintAmountInLCY@1003 : Boolean;NewPrintDetails@1004 : Boolean;NewHeadingType@1005 : Option;NewPagePercust@1006 : Boolean);
    BEGIN
      EndingDate := NewEndingDate;
      AgingBy := NewAgingBy;
      PeriodLength := NewPeriodLength;
      PrintAmountInLCY := NewPrintAmountInLCY;
      PrintDetails := NewPrintDetails;
      HeadingType := NewHeadingType;
      NewPagePercustomer := NewPagePercust;
    END;

    LOCAL PROCEDURE CalcCurrencyEntryNo@1000000000(CurrencyCode@1000000000 : Code[10]) : Integer;
    VAR
      Currency@1000000001 : Record 4;
    BEGIN
      Currency.SETFILTER(Code,'..%1',CurrencyCode);
      EXIT(Currency.COUNT);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'AccountsReceivblBuffer': WITH AccountsReceivblBuffer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount - Interval 1");
                ReportForNav.AddTotal(DataItemId,1,"Amount - Interval 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,2,"Amount - Interval 2");
                ReportForNav.AddTotal(DataItemId,3,"Amount - Interval 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,4,"Amount - Interval 3");
                ReportForNav.AddTotal(DataItemId,5,"Amount - Interval 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,6,"Amount - Interval 4");
                ReportForNav.AddTotal(DataItemId,7,"Amount - Interval 4 (LCY)");
                ReportForNav.AddTotal(DataItemId,8,"Amount - Interval 5");
                ReportForNav.AddTotal(DataItemId,9,"Amount - Interval 5 (LCY)");
                ReportForNav.AddTotal(DataItemId,10,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,11,Balance);
                ReportForNav.AddTotal(DataItemId,12,"Balance (LCY)");
                ReportForNav.AddTotal(DataItemId,13,Amount);
                ReportForNav.AddTotal(DataItemId,14,Balance);
                ReportForNav.AddTotal(DataItemId,15,"Amount - Interval 1");
                ReportForNav.AddTotal(DataItemId,16,"Amount - Interval 2");
                ReportForNav.AddTotal(DataItemId,17,"Amount - Interval 3");
                ReportForNav.AddTotal(DataItemId,18,"Amount - Interval 4");
                ReportForNav.AddTotal(DataItemId,19,"Amount - Interval 5");
              END;
           'Restore': BEGIN
                 "Amount - Interval 1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount - Interval 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Amount - Interval 2" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount - Interval 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount - Interval 3" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Amount - Interval 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Amount - Interval 4" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Amount - Interval 4 (LCY)" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Amount - Interval 5" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Amount - Interval 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 Amount := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,14,GroupTotalFieldNo);
                 "Amount - Interval 1" := ReportForNav.RestoreTotal(DataItemId,15,GroupTotalFieldNo);
                 "Amount - Interval 2" := ReportForNav.RestoreTotal(DataItemId,16,GroupTotalFieldNo);
                 "Amount - Interval 3" := ReportForNav.RestoreTotal(DataItemId,17,GroupTotalFieldNo);
                 "Amount - Interval 4" := ReportForNav.RestoreTotal(DataItemId,18,GroupTotalFieldNo);
                 "Amount - Interval 5" := ReportForNav.RestoreTotal(DataItemId,19,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>4258dc2b-a0d5-4cf6-8fbc-eb63e2c5d997</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>28f82b44-8b2e-4aa9-b323-bea9c565043f</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

