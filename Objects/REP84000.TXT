OBJECT Report 84000 ForNAV Sal. Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>38f89da9-8391-4c5d-9ab9-85940cd4e51a</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>0efb14d6-ca81-4ced-b0a8-62066ad1eddf</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

