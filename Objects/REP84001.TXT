OBJECT Report 84001 ForNAV Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>c5caafec-a706-4192-b53f-4f7b9b86438b</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>8d5c39c1-21d0-4ef9-bbd4-214af28ef818</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

