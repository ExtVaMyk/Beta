OBJECT Report 84002 ForNAV Sales Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>203f7736-f731-4f83-bfbe-03a0ef9d7f44</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>ce962da7-ad29-426d-82b2-1252f89ceefc</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

