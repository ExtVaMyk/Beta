OBJECT Report 84100 ForNAV Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>bec935ec-fa61-4e42-9c7f-6e63005aef86</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>e5e27a1b-d873-4b68-9349-185f0d12df68</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

