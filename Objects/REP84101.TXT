OBJECT Report 84101 ForNAV Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 84000;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>7b8eb9f0-693f-4eaa-a253-26c9929ea599</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>1c545f5a-9e74-41b1-b0f9-808fdb0d3d70</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

