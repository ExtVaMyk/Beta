OBJECT Report 84201 ForNAV Reminder
{
  OBJECT-PROPERTIES
  {
    Date=07-04-17;
    Time=16:08:14;
    Modified=Yes;
    Version List=FORNAV2.0.0.1194/1194;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table297;
               OnAfterGetRecord=BEGIN
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
                                 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1194, Version=2.0.0.1194, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 84001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 84002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 84000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Amount Specification" OF
          "VAT Amount Specification"::Always:
            EXIT(TRUE);
          "VAT Amount Specification"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Amount Specification"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Header': WITH Header DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"No.");
              END;
           'Restore': BEGIN
                 "No." := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>294f9a06-a98e-422b-b6f5-1ba115b2438e</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>d5e894e8-8c62-4500-9cbc-e5dd58629517</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

